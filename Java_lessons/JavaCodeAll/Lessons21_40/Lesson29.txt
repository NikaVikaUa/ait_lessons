Задачи на урок:
Обсуждение и разбор дз
Интерфейсы Comparable и Comparator
Практика, решение задач
Интерфейс Comparable

Для того, чтобы объекты можно было сравнить и сортировать, они должны применять интерфейс Comparable. При применении интерфейса он типизируется текущим классом.
Интерфейс Comparable содержит один единственный метод int compareTo(E item), который сравнивает текущий объект с объектом, переданным в качестве параметра. Если этот метод возвращает отрицательное число, то текущий объект будет располагаться перед тем, который передается через параметр. Если метод вернет положительное число, то, наоборот, после второго объекта. Если метод возвратит ноль, значит, оба объекта равны.

Интерфейс Comparator
Перед нами может возникнуть проблема если разработчик не реализовал в своем классе, который мы хотим использовать, интерфейс Comparable, либо реализовал, но нас не устраивает его функциональность, и мы хотим ее переопределить. На этот случай есть еще более гибкий способ, предполагающий применение интерфейса Comparator.

Интерфейс Comparator содержит ряд методов, ключевым из которых является метод compare().
Метод compare также возвращает числовое значение - если оно отрицательное, то объект a предшествует объекту b, иначе - наоборот. А если метод возвращает ноль, то объекты равны. Для применения интерфейса нам вначале надо создать класс компаратора, который реализует этот интерфейс.

см. задание в коде занятия - класс AnimalMain

code/animals/src/AnimalMain.java
public class AnimalMain {

    /*
   1. Создать класс Animal c полями name, weight, colour
   2. Вывести на экран список животных упорядоченный отдельно по имени,
        по весу, по цвету. Для реализации разных видов сортировки использовать интерфейс компаратор
   3*  Вывести на экран список ИМЕН животных, упорядоченный  по возрастанию последней буквы имени
   4. Протестировать
     */
}
code/cars29/src/Car.java
public class Car implements Comparable<Car>{
    private String model;
    private int year;
    private int price;

    public Car(String model, int year, int price) {
        this.model = model;
        this.year = year;
        this.price = price;
    }

    public String getModel() {
        return model;
    }

    public int getYear() {
        return year;
    }

    public int getPrice() {
        return price;
    }

    public int compareTo( Car car){
        return (this.getPrice() - car.getPrice());
    }

    @Override
    public String toString() {
        return "Car{" +
                "model='" + model + '\'' +
                ", year=" + year +
                ", price=" + price +
                '}';
    }
}
code/cars29/src/CarTest.java
import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

class CarTest {
    Car car1 = new Car( "Volvo",2020, 30000);
    Car car2 = new Car( "Toyota",1991, 5000);
    Car car3 = new Car( "Audi",2023, 60000);
    Car car4 = new Car( "Lada",1980, 1);


    @Test
    public void sorted(){
        Car[] actual = {car1,car2,car3,car4};
        Car[] expected = {car4,car2,car1,car3};

        Arrays.sort(actual);
        assertArrayEquals(expected,actual);// проверка равенства массивов
    }

    @Test
    public void testCompareTo(){
    // assertTrue  проверяет истинность выражения в скобках. Тест пройдет если результат выражения в скобках true.
    // не пройдет в обратном случае
        assertTrue( car1.compareTo(car2) > 0);
    }


    @Test
    public void testCompareToFalse(){
// assertFalse  проверяет ложность выражения в скобках. Т.е. тест проходит, если результат выражения false
        assertFalse(car1.compareTo(car2) < 0);
    }




}
code/cars29/src/Main.java
import java.util.Arrays;

public class Main {

    /*
    Создать класс Car с полями model, price, year(год выпуска)
В методе main создать массив обьектов класса Car, отсортировать
его по цене и вывести на экран
     */
    public static void main(String[] args) {
        Car car1 = new Car( "Volvo",2020, 30000);
        Car car2 = new Car( "Toyota",1991, 5000);
        Car car3 = new Car( "Audi",2023, 60000);
        Car car4 = new Car( "Lada",1980, 1);

        Car[] cars = {car1,car2,car3,car4};

        Arrays.sort(cars);
        for ( int i = 0; i<cars.length;i++){
            System.out.println(cars[i]);
            System.out.println("------------------");
        }
    }
}
code/comparable_interface29/src/Main.java
import java.util.Arrays;

public class Main {
    public static void main(String[] args) {

        // Интерфейс Comparable. Используется для сравнения однотипных обьектов и позволяет сортировать
        // обьекты в соответствии с определенным порядком. Если  срвнение и сортировка  например числовых массивов
        // понятна ( задан естественный порядок сортировки) , то в случае с обьектами надо определять порядок
        // самостоятельно. Для этого и служит  интерфейс Comparable , имеющий метод compareTo()
        /*
        int compareTo( Object o1)  - этот метод сравнивает обьект, на котором он вызывается со вторым обьектом
        ( в скобках).  Он возвращает целое число, которое означает:
        - если число больше нуля, то обьект, на котором вызывается метод, больше второго обьекта о1
        - если равно нулю, то обьекты равны
        - если меньше нуля то обьект меньше чем о1

        Сравнение происходит по отдельным полям. Нужно принять решение какое поле или поля класса будут
         использоваться в определении порядка сортировки обьектов.  Порядок сортировки , заданнвй в этом
           методе, является так  называемым естественным порядком сортировки обьектов класса.
         */
        int[] array = {11,2,67,23,0,6};
        Arrays.sort(array);
        System.out.println(Arrays.toString(array));

        String[] strings = {"John","Barbara","Alex"};
        Arrays.sort(strings);
        System.out.println(Arrays.toString(strings));

        Player player1 = new Player(30,"John",20);
        Player player2 = new Player(10,"Steve",18);
        Player player3 = new Player(20,"Alex",26);
        Player player4 = new Player(50,"Alex",20);

      //  System.out.println(player2.compareTo(player1));

        Player[] footballTeam = {player1,player2,player3,player4};

        System.out.println("Football team before sorting");
        System.out.println(Arrays.toString(footballTeam));

        System.out.println("Football team after sorting");
        Arrays.sort(footballTeam);
        System.out.println(Arrays.toString(footballTeam));
    }
}
code/comparable_interface29/src/Player.java
public class Player implements Comparable<Player>{

    private int ranking;
    private String name;
    private int age;

    public Player( int ranking, String name, int age){
        this.ranking = ranking;
        this.name = name;
        this.age = age;
    }

    public int getRanking() {
        return ranking;
    }

    public void setRanking(int ranking) {
        this.ranking = ranking;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }


  /*  public int compareTo(Player p){
        if( getRanking() - p.getRanking() > 0){
            return 1;
        }else if ( getRanking() - p.getRanking() < 0){
            return  -1;
        }else return 0;
    }*/

    // более короткая форма записи
 //   public int compareTo(Player p){
 //       return getRanking() -p.getRanking();
 //   }

 //   public int compareTo(Player p){
 //       return Integer.compare(getRanking(),p.getRanking());
 //   }
   // сравнение по имени с использованием метода compareTo  класса String
 //   public int compareTo(Player p){
 //              return getName().compareTo(p.getName());
 //          }

    // метод compareTo  для сортировки по имени, а если имена одинаковые, то по возрасту
    public int compareTo(Player p){
        int playerName = getName().compareTo(p.getName());// сравнение имен
        return playerName == 0 ? Integer.compare(getAge(),p.getAge()) : playerName; // сравнение по возрасту если
        // имена одинаковые
   //     if(playerName == 0){
   //         return Integer.compare(getAge(),p.getAge())
   //     } else return playerName;

    }

    @Override
    public String toString() {
        return "Player{" +
                "ranking=" + ranking +
                ", name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}
code/interface_comparator/src/Author.java
public class Author implements Comparable<Author> {

    String authorName;
    String bookName;
    int year;

    public Author(String authorName, String bookName, int year) {
        this.authorName = authorName;
        this.bookName = bookName;
        this.year = year;
    }

    public int compareTo( Author author){
        return this.authorName.compareTo(author.authorName);
    }

    @Override
    public String toString() {
        return "Author{" +
                "authorName='" + authorName + '\'' +
                ", bookName='" + bookName + '\'' +
                ", year=" + year +
                '}';
    }
}
code/interface_comparator/src/BookNameComparator.java
import java.util.Comparator;

public class BookNameComparator implements Comparator<Author> {

    public int compare ( Author a1, Author a2){
        return a1.bookName.compareTo(a2.bookName);
    }
}
code/interface_comparator/src/Main.java
import java.util.Arrays;

public class Main {
    /*
      Интерфейс Компаратор предоставляет классам возможности сортировки по
      дополнительным критериям, отличным от сортировки в естественном порядке, заданном с помощью интерфейса Comparable
      Этот интерфейс находится в пакете java.util  и имеет единственный метод compare().

      public interface Comparator<T>{

         public int compare ( T o1, T o2 );

      }

      Метод принимает 2 обьекта и сравнивает их так :
      - результат сравнения отрицательное число если первый обьект меньше второго
      - ноль если равны
      - положительное число если первый больше второго
     */
    public static void main(String[] args) {
        Author rowling = new Author("Rowling", "Harry Potter", 1997);
        Author tolkien = new Author("Tolkien", "Lord of the Rings", 1954);
        Author reid = new Author("Reid", "Headless Horseman", 1866);
        Author orwell = new Author("Orwell", "1984", 1949);
        Author remark = new Author("Remark", "Three Comrades", 1936);

        Author[] library = {rowling, tolkien, reid, orwell, remark};

        System.out.println("Print before sorting:");
        for (Author author : library) {
            System.out.println(author);
            System.out.println("------------");
        }

        System.out.println("Sorting by author's name:");
        Arrays.sort(library);
        for (Author author : library) {
            System.out.println(author);
            System.out.println("------------");
        }

        System.out.println();
        System.out.println("Sorting by publishing date:");
        Arrays.sort(library, new PublishingYearComparator());// метод sort принимает кроме массива для сортировки
                                                                 // также обьект компаратора в соответствии с методом
                                                                 // compare которого и будет происходить сортировка
        for (Author author : library) {
            System.out.println(author);
            System.out.println("------------");
        }

        System.out.println();
        System.out.println("Sorting by book's name:");
        Arrays.sort(library,new BookNameComparator());

        for (Author author : library) {
            System.out.println(author);
            System.out.println("------------");
        }
        // еще один вариант использования метода sort -  сортировка части массива
        int[] ints = {4,8,1,6,0,2};
        Arrays.sort(ints,1,4);
        System.out.println(Arrays.toString(ints));
    }
}
code/interface_comparator/src/PublishingYearComparator.java
import java.util.Comparator;

public class PublishingYearComparator implements Comparator<Author>{
    @Override
    public int compare(Author a1, Author a2) {
        return Integer.compare(a1.year,a2.year);
    }
}