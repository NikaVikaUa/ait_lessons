Задачи на урок:
Обсуждение и разбор дз
Stream API, продолжение
Потоки (Stream) в Java

*******************************************************************************************************

Поток - способ работать с данными, не меняя их источник. Поток, как и в реальном мире, не возможно повернуть назад или обойти повторно.

Потоки описаны в пакете java.util.stream, полное имя класса - java.util.stream.Stream.

Документация класса Stream

Создание потоков
Пустой поток
Stream<String> streamEmpty = Stream.empty();
Может пригодиться нам там, где мы не хотим передавать null и вызывать NullPointerException, например:

public Stream<String> streamOf(List<String> list) {
  if (list == null || list.isEmpty()) {
    return Stream.empty();
  }
  return list.stream();
}
Поток на основе коллекции
Все коллекции (Collection и его наследники) могут создать поток на основе имеющихся данных при помощи метода .stream():

Collection<String> collection = Arrays.asList("a", "b", "c");
Stream<String> streamOfCollection = collection.stream();
Поток на основе массива
Поток модно создавать как на основе перечисленных в аргументах данных

Stream<String> stream = Stream.of("a", "b", "c");
Так и с использованием метода Arrays.stream:

String[] arr = {"a", "b", "c"};
Stream<String> streamOfArrayFull = Arrays.stream(arr);
Stream<String> streamOfArrayPart = Arrays.stream(arr, 1, 3);
Потоки объектов примитивных типов
Для потоков, содержащих в себе int, long и double, существуют классы IntStream, LongStream и DoubleStream соответственно.

Работа с потоками
Работа с потоками обычно выглядит следующим образом:

Создание из источника данных
Обработка при помощи промежуточных (intermediate) операторов.
Вызов терминального (terminal) оператора.
Промежуточные операторы (ещё называют "lazy" - ленивые) обрабатывают поступающие элементы и возвращают стрим. Промежуточных операторов в цепочке обработки элементов может быть много.

Терминальные (ещё называют "eager" - жаждущие) — обрабатывают элементы и завершают работу стрима. Терминальный оператор в цепочке может быть только один.

Промежуточные операторы
Общая идея промежуточных операторов "в цепочке" вам уже слегка знакома. Именно так может быть устроена работа со строками.

filter(Predicate predicate) фильтрует стрим, пропуская только те элементы, что проходят по условию

Predicate - встроенный функциональный интерфейс. "Что-то", возвращающее true или false - например, лямбда-функция);

map(Function mapper) даёт возможность создать функцию, с помощью которой мы будем превращать каждый элемент в какой-то другой

Функциональный интерфейс Function<T,R> представляет функцию перехода от объекта типа T к объекту типа R.

limit(long maxSize) ограничивает стрим по количеству элементов

skip(long n) пропускает n элементов

sorted() или sorted(Comparator comparator) сортирует стрим

distinct() возвращает только уникальные элементы

Терминальные операторы
forEach(Consumer action)

Consumer - "Потребитель" - функциональный интерфейс, описывающий действие с каждым элементом.

count() возвращает количество элементов стрима

collect(Collector collector) собирает итог в список, множество или другую коллекцию, объединяет в строку...

findFirst() вытаскивает первый элемент стрима

allMatch(Predicate predicate) возвращает true, если все элементы стрима удовлетворяют условию predicate

anyMatch(Predicate predicate) возвращает true, если хотя бы один элемент стрима удовлетворяет условию predicate

noneMatch(Predicate predicate) возвращает true, если ни один элемент стрима не удовлетворяет условию predicate

Коллекторы
Некоторые коллекторы уже описаны в классе Collectors (документация).

toList() собирает элементы в List
toSet() cобирает элементы в множество
counting() подсчитывает количество элементов
joining() собирает элементы в одну строку
joining(CharSequence delimiter)
joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)
Пример
Возьмём числа 50, 60, 70, 80, 90, 100, 110, 120.

Отберём те из них, которые меньше 90.

Добавим к каждому отобранному по 10.

Распечатаем первые три получившихся числа.

Без потоков:

int[] arr = {50, 60, 70, 80, 90, 100, 110, 120};
int count = 0;
for (int x : arr) {
  if (x >= 90) {
    continue;
  }
  x += 10;
  count++;
  if (count > 3) {
    break;
  }
  System.out.println(x);
}
С потоками (и красивыми переносами для большей понятности):

int[] arr = {50, 60, 70, 80, 90, 100, 110, 120};
Arrays.stream(arr)
    .filter(x -> x < 90)
    .map(x -> x + 10)
    .limit(3)
    .forEach(System.out::println);
С потоками, но без красивых переносов:

IntStream.of(50, 60, 70, 80, 90, 100, 110, 120).filter(x -> x < 90).map(x -> x + 10).limit(3)
    .forEach(System.out::print);

**********************************************************************************************************

см. код - practice Main

***********************************************************************************************************

code/homework58/src/Address.java
public class Address {
    String street;
    int houseNumber;

    public Address(String street, int houseNumber) {
        this.street = street;
        this.houseNumber = houseNumber;
    }

    public String getStreet() {
        return street;
    }

    public int getHouseNumber() {
        return houseNumber;
    }

    @Override
    public String toString() {
        return "Address{" +
                "street='" + street + '\'' +
                ", houseNumber=" + houseNumber +
                '}';
    }
}

*********************************************************************************************************

code/homework58/src/Homework.java
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toSet;

public class Homework {
    public static void main(String[] args) {
        List<String> names = List.of("John","John","Bill","Mary","Bill","Mary");
        System.out.println(removeDuplicates(names));
        System.out.println(removeDuplicates1(names));


        System.out.println("-----task2-------");
        Address address1 = new Address("Street1",1);
        Address address2 = new Address("Street2",13);
        Address address3 = new Address("Street3",16);
        Address address4 = new Address("Street4",10);

        Person p1 = new Person("John",16,address1);
        Person p2 = new Person("Jack",34,address2);
        Person p3 = new Person("Peter",45,address3);
        Person p4 = new Person("John Smith",13,address3);
        Person p5 = new Person("Kate",67,address4);

        List<Person>list = Arrays.asList(p1,p2,p3,p4,p5);

        System.out.println(findAddresses(list));
    }

    /*
    Задача1
Написать метод, принимающий список имен,
где некоторые имена повторяются, и возвращающий список без повторений.
     */

    public static List<String> removeDuplicates( List<String> names){
        return names
                .stream()
                .distinct()
                .collect(Collectors.toList());
    }

    public static List<String> removeDuplicates1( List<String>names){
        return names
                .stream()
                .collect(Collectors.collectingAndThen(toSet(), ArrayList::new ));
    }

    /*
    Задача2
Есть класс Address с полями String street и int houseNumber и класс Person с полями String name,
int age, Address address.
Написать метод, возвращающий адреса тех, кто старше 17 лет.
List < Address > findAddresses( List< Person > input )

В обоих задачах для решения использовать стримы
     */
   static List < Address > findAddresses( List< Person > input ){

        return input
                .stream()
                .filter(p -> p.getAge() > 17)
                .map(Person :: getAddress)
                .collect(Collectors.toList());
    }


}

**************************************************************************************************

code/homework58/src/Person.java
public class Person {
    String name;
    int age;
    Address address;

    public Person(String name, int age, Address address) {
        this.name = name;
        this.age = age;
        this.address = address;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public Address getAddress() {
        return address;
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                ", address=" + address +
                '}';
    }
}

***************************************************************************************************************

code/practice58/src/Main.java
public class Main {

    //  Пусть есть класс Person  с полями имя и возраст.
    // 1. Написать метод, возвращающий общий возраст всех людей старще 17 лет.
    // public static int countGeneralAge( List<Person> input)
    //
    // 2. Написать метод, возвращающий имена тех людей, которые являются в Германии совершеннолетними.
    // Должна быть возвращена примерно такая строка : in Germany Jack and Bill are of legal age
    // String isLegalAge(List<Person> input)

}

**********************************************************************************************************

code/streams_api/src/Main.java
import homework.Address;
import homework.Person;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Main {

    public static void main(String[] args) {
        List<String> names = Arrays.asList("John","Jack","Ann","Ali","Peter");
        System.out.println(sortByStringLength(names));
        System.out.println(partitioningList(names));

        Address address1 = new Address("Street1",1);
        Address address2 = new Address("Street2",13);
        Address address3 = new Address("Street3",16);
        Address address4 = new Address("Street4",10);

        Person p1 = new Person("John",16,address1);
        Person p2 = new Person("Jack",16,address2);
        Person p3 = new Person("Peter",45,address3);
        Person p4 = new Person("John Smith",45,address3);
        Person p5 = new Person("Kate",67,address4);

        List<Person>list = Arrays.asList(p1,p2,p3,p4,p5);

        System.out.println("-----grouping by age method--------------------");
        System.out.println(getPersonsByAge(list));

        //16 -> John, Jack
        //67 -> Kate
        // 45 -> Peter, John Smith
        getPersonsByAge(list).forEach((k,v)-> System.out.println(k + "->"
                        +v.stream().map(Person::getName).collect(Collectors.toList())));


        //сосчитать количество элементов
        list.stream().collect(Collectors.counting());


     Optional<Integer> res =  Stream.of(1,2,3,4,5,6).parallel().reduce((n1,n2)->n1 + n2);
        System.out.println(res.get());

        List<String> people = Arrays.asList("Jack","Tom","Kate","Bill","Ben","John");

        System.out.println("stream");
        people.stream().filter(name -> name.length()==4).forEach(System.out::println);

        System.out.println("\n parallelStream");
        people.parallelStream().filter(name -> name.length()==4).forEach(System.out::println);

        System.out.println("Collectors joining method");
        System.out.println(convertToString(people));
        System.out.println(convertToStringComma(people));
        System.out.println(convertToStringPrefix(people));


    }

    // GroupingBy method
    /*
    Написать метод, принимающий лист строк и группирующий их по длине строки. Т.е. метод будет
    возвращать мапу в которой ключами будут длины строк, а занчениями сеты соответствующих
    строк этой длины.

     */
    public static Map<Integer, Set<String>> sortByStringLength(List<String>list){
        return list.stream()
                .collect(Collectors.groupingBy(String::length,Collectors.toSet()));
    }

    // метод partitioningBy() -  это особый случай метода groupingBy. Он принимает предикату и затем собирает
    // элементы стрима в мапу у которой в качестве ключей служат булеановские true  или false  а в качестве значений
    // набор элементов удовлетворяющих этому условию ( для ключа true)  или нет (клжч false)

    // написать метод , который группирует элементы  листа строк по длине строки >= 4

    public static Map<Boolean,List<String>> partitioningList( List<String>list){
        return list.stream()
                .collect(Collectors.partitioningBy(s->s.length() >= 4));
    }

    // написать метод, принмающий лист персонов, и возвращающий мапу, где возраст является ключом а
    // лист персонов этого возраста значением

    public static Map<Integer,List<Person>> getPersonsByAge( List<Person> input){
        return input
                .stream()
                .collect(Collectors.groupingBy(Person::getAge));
    }

    /*
    {16=[Person{name='John', age=16, address=Address{street='Street1', houseNumber=1}}, Person{name='Jack', age=16, address=Address{street='Street2', houseNumber=13}}], 67=[Person{name='Kate', age=67, address=Address{street='Street4', houseNumber=10}}], 45=[Person{name='Peter', age=45, address=Address{street='Street3', houseNumber=16}}, Person{name='John Smith', age=45, address=Address{street='Street3', houseNumber=16}}]}
     */

    //Написать метод, обьединяющий имена из листа стрингов в следующую строку:
    // name1name2name3
    public static String convertToString( List<String> list){
        return list
                .stream()
                .collect(Collectors.joining());
    }

    //Написать метод, обьединяющий имена из листа стрингов в следующую строку:
    // name1, name2, name3
    public static String convertToStringComma( List<String> list){
        return list
                .stream()
                .collect(Collectors.joining(" ,"));
    }


    //Написать метод, обьединяющий имена из листа стрингов в следующую строку:
    //Students:  name1, name2, name3 study Java
    public static String convertToStringPrefix( List<String> list){
        return list
                .stream()
                .collect(Collectors.joining(" ,","Students "," study Java"));
    }


}

*****************************************************************************************************************

code/streams_api/src/OptionalStream.java
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.Random;

public class OptionalStream {

    public static void main(String[] args) {


        List<Integer> numbers = Arrays.asList(1,2,3,4);
        Optional<Integer> min = numbers.stream().min(Integer::compare);

        if( min.isPresent()){
            System.out.println(min.get());
        }
        numbers = Arrays.asList();
         min = numbers.stream().min(Integer::compare);
        System.out.println(min.orElse(-1));


         numbers = Arrays.asList(1,2,3,4);
         min = numbers.stream().min(Integer::compare);

        Random random = new Random();
        System.out.println(min.orElseGet(()->random.nextInt(1,10)));

        // IfPresent

        numbers = Arrays.asList(1,2,3,4);
        min = numbers.stream().min(Integer::compare);
        min.ifPresent(System.out::println);

        numbers = Arrays.asList();
        min = numbers.stream().min(Integer::compare);
        min.ifPresentOrElse(
                System.out::println,
                () -> System.out.println("value is not present")
        );


    }
}