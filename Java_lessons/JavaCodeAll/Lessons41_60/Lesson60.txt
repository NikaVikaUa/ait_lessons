Задачи на урок:
Обсуждение и разбор дз
I/O Streams, символьные потоки

****************************************************************************************************************

Потоки ввода-вывода. Работа с файлами

Отличительной чертой многих языков программирования является работа с файлами и потоками. В Java основной функционал работы с потоками сосредоточен в классах из пакета java.io.

Ключевым понятием здесь является понятие потока. Хотя понятие "поток" в программировании довольно перегружено и может обозначать множество различных концепций. В данном случае применительно к работе с файлами и вводом-выводом мы будем говорить о потоке (stream), как об абстракции, которая используется для чтения или записи информации (файлов, сокетов, текста консоли и т.д.).

Поток связан с реальным физическим устройством с помощью системы ввода-вывода Java. У нас может быть определен поток, который связан с файлом и через который мы можем вести чтение или запись файла. Это также может быть поток, связанный с сетевым сокетом, с помощью которого можно получить или отправить данные в сети. Все эти задачи: чтение и запись различных файлов, обмен информацией по сети, ввод-ввывод в консоли мы будем решать в Java с помощью потоков.

Объект, из которого можно считать данные, называется потоком ввода, а объект, в который можно записывать данные, - потоком вывода. Например, если надо считать содержание файла, то применяется поток ввода, а если надо записать в файл - то поток вывода.

В основе всех классов, управляющих потоками байтов, находятся два абстрактных класса: InputStream (представляющий потоки ввода) и OutputStream (представляющий потоки вывода)

Но поскольку работать с байтами не очень удобно, то для работы с потоками символов были добавлены абстрактные классы Reader (для чтения потоков символов) и Writer (для записи потоков символов).

Все остальные классы, работающие с потоками, являются наследниками этих абстрактных классов.

***********************************************************************************************************

Задача 1
Написать метод, читающий текстовый файл и возвращающий строку, состоящую из строчек этого файла, разделенных пробелом.

Задача 2
Есть файл такого вида
1
2
3
4
5
Написать метод, принимающий этот файл и возвращающий сумму чисел.

Задача 3
Написать метод, принимающий текстовый файл и находящий самую длинную строку в нем.
Метод возвращает эту строку

*****************************************************************************************************************

code/charStreams/src/BufferedReadingWriting.java
import java.io.*;

public class BufferedReadingWriting {

    // BufferedWriter - записывает текст в поток, перед этим помещая в буфер записываемые
    /*
    символы
    Конструкторы:
    BufferedWriter( Writer out)
    BufferedWriter( Writer out, int size)

     */
    public static void main(String[] args) {

        try(BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("bufferedText.txt")))
        {
            bufferedWriter.write("Hello Java\nHello Java");
        }
        catch (IOException e){
            System.out.println("IOException");
        }

        // чтение текста BufferedReader
        // BufferedReader(Reader in)
        // BufferedReader(Reader in, int size)
        // метод readLine() -  позволяет считывать из потока построчно

        // посимвольно
        try( BufferedReader bufferedReader = new BufferedReader(new FileReader("bufferedText.txt"))) {
            int ch;
            while ((ch = bufferedReader.read()) != -1){
                System.out.print((char)ch);
            }
        }
        catch (IOException e){

        }


        System.out.println("\nwith readLine()");
        // readLine()
        try( BufferedReader bufferedReader = new BufferedReader(new FileReader("bufferedText.txt"))) {
            // чтение построчно
            String str;
            while ((str = bufferedReader.readLine()) != null){

                System.out.println(str);
            }
        }
        catch (IOException e){

        }

        //  чтение в файл с консоли
        try( BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
             BufferedWriter bw = new BufferedWriter(new FileWriter("inputConsole.txt")))
        {
           String input;
           while(!(input = br.readLine()).equalsIgnoreCase("stop")){
               bw.write(input +"\n");
               bw.flush();

           }

        }
        catch (IOException e){
            System.out.println("IO Exception");
        }

        File name = new File("first.txt");
        System.out.println(name.exists());


    }
}

*****************************************************************************************************************

code/charStreams/src/Main.java
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class Main {

    // Reader and Writer -  абстрактные родительские классы для
    /*
    классов, работающих с потоками символов

    Reader -  чтение текстовой информации
    основные методы:
    void close()
    int read()
    int read( char[] buffer)
    int read( char[]buffer, int offset, int length)

    Writer - запись текстовой информации
     append() - добавляет символ в конец потока
     close()
     flush() - очищает буфер
     write(int c)
     write ( char[]buffer)
     write( char[]buffer, int offset, int length)

      Класс FileWriter - запись текстовых файлов
      constructors:
      FileWriter( String filename)
      FileWriter( File filename)
      FileWriter( String filename,boolean append)
      FileWriter( File filename, boolean append)

     */
    public static void main(String[] args) {
        try(FileWriter writer = new FileWriter("inText.txt")){
            writer.write("Hello!");
            writer.append('!');

            writer.flush();

        }
        catch (IOException e){
            System.out.println("IO Error caught");
        }

        // FileReader - для чтения текстовых файлов
         // конструкторы:
        // FileReader( String fileName)
        // FileReader( File fileName)

      try  (FileReader reader = new FileReader("inText.txt"))
      {
          int ch;
          while((ch=reader.read()) != -1){

              System.out.print((char)ch);
          }

      }
      catch (IOException e){
          System.out.println(e.getMessage());
      }
    }
}

******************************************************************************************************************

code/homework60/src/Homework.java
import java.io.FileInputStream;
import java.io.IOException;

public class Homework {

    /*
    Написать программу, сравнивающую два файла.
Программа должна считывать файлы и затем сравнивать их содержимое( байты).
Если найдено отличие, значит файлы не равны и программа выводит на экран соответствующее сообщение.
Если конец обоих файлов достигается одновременно и отличий не найдено, значит файлы одинаковые и
программа также выводит на экран соответствующее сообщение.
Предварительно файлы должны быть созданы в корневой директории проекта в виде first.txt , second.txt
     */
    public static void main(String[] args) {
        compareFiles("first.txt","second.txt");
    }

    public static void compareFiles( String file1, String file2){
        int i = 0,j = 0;
        try (FileInputStream f1 = new FileInputStream(file1);
             FileInputStream f2 = new FileInputStream(file2))
        {
            do {
                i = f1.read();
                j = f2.read();
                if ( i != j) break;
            }while( i != -1 && j != -1);

            if( i != j)
                System.out.println("Files differ");
            else
                System.out.println("Files are equal");

        } catch (IOException e){
        System.out.println("I/0 Error:"+e );
        }
    }
}


******************************************************************************************************************

code/io_stream/src/DateStreamClass.java
code/io_stream/src/Employee.java
public class Employee {
    public String name;
    public int age;
    public double salary;
    public boolean isManager;

    public Employee(String name, int age, double salary, boolean isManager) {
        this.name = name;
        this.age = age;
        this.salary = salary;
        this.isManager = isManager;
    }
}

******************************************************************************************************************

code/io_stream/src/Main.java
import java.io.*;

public class Main {

    // классы для работы с массивами байтов

    // ByteArrayInputStream  - использует в качестве источника массив байтов
    // конструкторы
    /*
    ByteArrayInputStream( byte[] buffer
    ByteArrayInputStream( byte[] buffer, int offset, in t length)
     */
    public static void main(String[] args) {
        byte[] array = new byte[]{1,2,3,4};

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(array);

    //    int i;
    //    while((i = byteArrayInputStream.read()) != -1){
    //        System.out.println(i);
   //     }

        // запись массива байт с помощью ByteArrayOutputStream
        // constructors:
        //  ByteArrayOutputStream() - создает массив байтов длиной 32 байта
        //  ByteArrayOutputStream(int size)- создает маччив длиной size

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        String word = "Hello Java";
        byte[] buffer = word.getBytes();

        try {
            byteArrayOutputStream.write(buffer);
        }
        catch (IOException e){
            System.out.println("IO exception caught");
        }

        System.out.println(byteArrayOutputStream.toString());


        byte[] arr = byteArrayOutputStream.toByteArray();

        for ( byte b : arr){
            System.out.print((char)b);
        }

        //Буферизированные потоки

        //BufferedInputStream - добавляется специальный буфер в памяти.
       // конструкторы:
        // BufferedInputStream( InputStream iputStream)
        // BufferedInputStream( InputStream iputStream, int bufferSize)

        String word1 = "Hello World";
        byte[] buffer1 = word1.getBytes();

        ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(buffer1);

       try(BufferedInputStream bufferedInputStream = new BufferedInputStream(byteArrayInputStream1)) {
           int i1;
           while ((i1 = bufferedInputStream.read()) != -1){
               System.out.print((char)i1);
           }
       }
       catch (Exception e){
           System.out.println( e.getMessage());
       }
        System.out.println();

       //  буфферизованный поток вывода BufferedOutPutStream
        //  BufferedOutPutStream( OutPutStream)
        //  BufferedOutPutStream( OutPutStream, int bufferSize)

        word = "Hello World";
        try(BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream("out.txt"))){
            byte[] buffer2 = word.getBytes();
            out.write(buffer2);

        }
        catch (IOException e){
            System.out.println(e.getMessage());
        }


    }
}

*******************************************************************************************************************

code/io_stream/src/PrintStreamClass.java
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;

public class PrintStreamClass {

    public static void main(String[] args) {
        System.out.println();

        // PrintStream - форматируемый ввод и вывод
        // PrintStream(OutPutStream outputStream)
        // PrintStream (String file)

        String str = " Hello!";

        try(FileOutputStream fos = new FileOutputStream("out.txt");
            PrintStream printStream = new PrintStream(fos))  {
            printStream.println(str);
        }
        catch (IOException e){e.getMessage();}
    }
}