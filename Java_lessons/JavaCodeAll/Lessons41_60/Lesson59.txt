Задачи на урок:
Обсуждение и разбор дз
I/O Streams, виды потоков ввода-вывода
Потоки байтов

*****************************************************************************************************************

Потоки ввода-вывода. Работа с файлами

Отличительной чертой многих языков программирования является работа с файлами и потоками. В Java основной функционал работы с потоками сосредоточен в классах из пакета java.io.

Ключевым понятием здесь является понятие потока. Хотя понятие "поток" в программировании довольно перегружено и может обозначать множество различных концепций. В данном случае применительно к работе с файлами и вводом-выводом мы будем говорить о потоке (stream), как об абстракции, которая используется для чтения или записи информации (файлов, сокетов, текста консоли и т.д.).

Поток связан с реальным физическим устройством с помощью системы ввода-вывода Java. У нас может быть определен поток, который связан с файлом и через который мы можем вести чтение или запись файла. Это также может быть поток, связанный с сетевым сокетом, с помощью которого можно получить или отправить данные в сети. Все эти задачи: чтение и запись различных файлов, обмен информацией по сети, ввод-ввывод в консоли мы будем решать в Java с помощью потоков.

Объект, из которого можно считать данные, называется потоком ввода, а объект, в который можно записывать данные, - потоком вывода. Например, если надо считать содержание файла, то применяется поток ввода, а если надо записать в файл - то поток вывода.

В основе всех классов, управляющих потоками байтов, находятся два абстрактных класса: InputStream (представляющий потоки ввода) и OutputStream (представляющий потоки вывода)

Но поскольку работать с байтами не очень удобно, то для работы с потоками символов были добавлены абстрактные классы Reader (для чтения потоков символов) и Writer (для записи потоков символов).

Все остальные классы, работающие с потоками, являются наследниками этих абстрактных классов.

******************************************************************************************************************

Задача 1
Написать программу, сравнивающую два файла.
Программа должна считывать файлы и затем сравнивать их содержимое( байты).
Если найдено отличие, значит файлы не равны и программа выводит на экран соответствующее сообщение. Если конец обоих файлов достигается одновременно и отличий не найдено, значит файлы одинаковые и программа также выводит на экран соответствующее сообщение. Предварительно файлы должны быть созданы в корневой директории проекта в виде first.txt , second.txt

******************************************************************************************************************

code/custom_collector/src/Box.java
public class Box {
    int value;

    public Box( int value){
        this.value = value;
    }

    public void setValue( int value){
        this.value = value;
    }

    public int getValue(){
        return value;
    }

    @Override
    public String toString() {
        return "Box{" +
                "value=" + value +
                '}';
    }
}

*************************************************************************************************************

code/custom_collector/src/Main.java
import java.util.function.BiConsumer;
import java.util.function.BinaryOperator;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Stream;

public class Main {

    /*
     Пусть есть класс Person  с переменными  String name  и int salary. Написать
     коллектор , считпющий суммарную зарплату всех сотрудников.
     */
    public static void main(String[] args) {
        Person p1 = new Person("John", 1500);
        Person p2 = new Person("Peter", 1800);
        Person p3 = new Person("Mary", 2600);
        Person p4 = new Person("Helen", 1000);


        Supplier<Box> supp = () -> {
            System.out.println("Supplying starting value");
            return new Box(0);
        };

        BiConsumer<Box,Person> accumulator = (result,person)-> {
            result.setValue(result.getValue() + person.getSalary());
            System.out.println(result.getValue() +" "+person.getName());
        };

        BinaryOperator<Box> combiner = (res1, res2) -> {
            System.out.println("Combining results");
            res1.setValue(res1.getValue() + res2.getValue());
            return res1;
        };

        Collector<Person, Box, Box> collector = Collector.of(
                supp,
                accumulator,
                combiner
        );
                /*
                T - тип обьектов коллекции
                A - тип обьекта аккумулятора
                R -  тип результата
                 */

        Box box = Stream.of(p1,p2,p3,p4)
                .parallel()
                .collect(collector);

        System.out.println("Total salary "+box);
    }
}

****************************************************************************************************************

code/custom_collector/src/Person.java
public class Person {
    String name;
    int salary;

    public Person(String name, int salary) {
        this.name = name;
        this.salary = salary;
    }

    public String getName() {
        return name;
    }

    public int getSalary() {
        return salary;
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", salary=" + salary +
                '}';
    }
}

****************************************************************************************************************

code/homework59/src/Homework.java
import java.util.List;
import java.util.stream.Collectors;

public class Homework {

    /*
    Пусть есть класс Person  с полями имя и возраст.
    // 1. Написать метод, возвращающий общий возраст всех людей старще 17 лет.
    // public static int countGeneralAge( List<Person> input)
    //
    // 2. Написать метод, возвращающий имена тех людей, которые являются в Германии совершеннолетними.
    // Должна быть возвращена примерно такая строка : in Germany Jack and Bill are of legal age
    // String isLegalAge(List<Person> input)

     */

    public static void main(String[] args) {
        Person person1 = new Person("Bill",12);
        Person person2 = new Person("Ann",20);
        Person person3 = new Person("Ben",30);
        Person person4 = new Person("Jack",50);
        List<Person>persons = List.of(person1,person2,person3,person4);
        System.out.println(countGeneralAge(persons));
        System.out.println(countGeneralAge2(persons));
        System.out.println(isLegalAge(persons));
    }

    public static int countGeneralAge( List<Person> input){
        return input
                .stream()
                .filter(s -> s.getAge() > 17)
                .map(Person::getAge)
                .reduce(0,Integer::sum);

    }

    public static int countGeneralAge2( List<Person> input){
        return input
                .stream()
                .filter(s -> s.getAge() > 17)
                .mapToInt(Person::getAge)
                .sum();
    }

   public static String isLegalAge(List<Person> input){
       return input
               .stream()
               .filter(s -> s.getAge() > 17)
               .map(Person::getName)
               .collect(Collectors.joining(" and ","in Germany "," are of legal age."));
   }


}

***************************************************************************************************************

code/homework59/src/Person.java
public class Person {

    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }
}

**************************************************************************************************************

code/io_streams/src/CloseWithFinally.java
import java.io.FileInputStream;
import java.io.IOException;

public class CloseWithFinally {

    public static void main(String[] args) {


    //    FileInputStream fileInputStream = null;

        // try with resources
        try(FileInputStream fileInputStream = new FileInputStream("text.txt");) {

          //  fileInputStream = new FileInputStream("text.txt");

            int i;
            while ((i = fileInputStream.read()) != -1) {
                System.out.print((char) i);
            }
        } catch (IOException e) {
            System.out.println(e.getStackTrace());
        }
      //  finally {

      //      try {
     //           if (fileInputStream != null)
     //               fileInputStream.close();
     //       }
     //       catch (IOException e){
     //           System.out.println(e.getStackTrace());
     //       }
     //   }
    }
}

*******************************************************************************************************************

code/io_streams/src/Main.java
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class Main {
    // потоки ввода-вывода
    /*
    /Понятие потока является ключевым в данном случае. Обьект, из которого
    считываеются данные это поток ввода , а обьект в который записываются данные - поток вывода.
    Все классы, работающие с вводом-выводом делятся на две группы - работающие с байтами и работающие с символами.
    В основе всех классов, работающих с потоками байтов лежат два абстрактных класса  InputStream  и OutputStream,\
    а классов, работающих с символами - Reader и Writer

    Потоки байтов

    Класс InputStream,  основные методы:
    int available() - возвращает количество доступных для чтения в потоке байтов
    void close() - закрывает поток
    int read() - возвращает целочисленное представление следующего  байта в потоке, а когда в потоке не
                остается доступных для чтения байтов - возвращает -1
    int read(byte[] buffer) - считывает байты в массив и возвращает количество считанных байтов. Если ни одного
                                байта не считано, вернет -1

     int read( byte[]buffer, int offset, int length) -считывает байты в количестве равном length  и записывает
                их в массив buffer, начиная с элемента buffer[offset]. Возвращает число прочитанных байтов

    Класс OutputStream

    void close()
    void flush() - очищает буфер вывода , записывая содержимое

    void write(int b) - записывает в  выходной поток один байт
    void write(byte[]buffer ) - записывает в  выходной поток массив  байтов
    void write (byte[]buffer, int offset, int length)

    Чтение и запись файлов- FileInputStream и FileOutputStream

    FileOutputStream - предназначен для записи байтов в файл
    конструкторы:
    FileOutputStream( String filePath)
    FileOutputStream( String filePath,boolean append)
    filePath - путь к файлу и его имя
    append -добавлять информацию после уже имеющейся или перезаписывать файл
     */
    public static void main(String[] args) {

        String string = " Hello Java!";
        try(FileOutputStream fos = new FileOutputStream("text.txt"))
        {
            byte[] buffer = string.getBytes();

            fos.write(buffer,0,buffer.length);
        }
        catch (IOException e){
            System.out.println(e.getMessage());
        }

        // чтение файла FileInputStream(String fileName)

       try (FileInputStream fin = new FileInputStream("text.txt"))
       {
        int i;
        while((i = fin.read()) != -1){
            System.out.print((char)i);
        }
       }
       catch (IOException e){
           System.out.println(e.getMessage());
       }


       // считать данные в массив байтов

       try (FileInputStream fileInputStream = new FileInputStream("text.txt"))
        {
            byte[]buffer = new byte[512];

            int counter;
            while((counter = fileInputStream.read(buffer)) != -1){
                for( int i = 0; i < counter; i++){
                    System.out.println((char)buffer[i]);
                }
            }
        }
       catch (IOException e){
           System.out.println(e.getMessage());
       }
    }
}

************************************************************************************************************

code/io_streams/src/ReadByteArrayClass.java
import java.io.ByteArrayInputStream;

public class ReadByteArrayClass
{

    // ByteArrayInputStream  -входной поток, считывающий информацию из массива байтов
    public static void main(String[] args) {
        byte[] array = new byte[]{1,2,3,4,5};
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(array);

        int i;
        while((i = byteArrayInputStream.read()) != -1){
            System.out.println(i);
        }
    }


}