Задачи на урок:
Обсуждение и разбор дз
Stream API
Потоки (Stream) в Java

*********************************************************************************************************

Поток - способ работать с данными, не меняя их источник. Поток, как и в реальном мире, не возможно повернуть назад или обойти повторно.

Потоки описаны в пакете java.util.stream, полное имя класса - java.util.stream.Stream.

Документация класса Stream

Создание потоков
Пустой поток
Stream<String> streamEmpty = Stream.empty();
Может пригодиться нам там, где мы не хотим передавать null и вызывать NullPointerException, например:

public Stream<String> streamOf(List<String> list) {
  if (list == null || list.isEmpty()) {
    return Stream.empty();
  }
  return list.stream();
}
Поток на основе коллекции
Все коллекции (Collection и его наследники) могут создать поток на основе имеющихся данных при помощи метода .stream():

Collection<String> collection = Arrays.asList("a", "b", "c");
Stream<String> streamOfCollection = collection.stream();
Поток на основе массива
Поток модно создавать как на основе перечисленных в аргументах данных

Stream<String> stream = Stream.of("a", "b", "c");
Так и с использованием метода Arrays.stream:

String[] arr = {"a", "b", "c"};
Stream<String> streamOfArrayFull = Arrays.stream(arr);
Stream<String> streamOfArrayPart = Arrays.stream(arr, 1, 3);
Потоки объектов примитивных типов
Для потоков, содержащих в себе int, long и double, существуют классы IntStream, LongStream и DoubleStream соответственно.

Работа с потоками
Работа с потоками обычно выглядит следующим образом:

Создание из источника данных
Обработка при помощи промежуточных (intermediate) операторов.
Вызов терминального (terminal) оператора.
Промежуточные операторы (ещё называют "lazy" - ленивые) обрабатывают поступающие элементы и возвращают стрим. Промежуточных операторов в цепочке обработки элементов может быть много.

Терминальные (ещё называют "eager" - жаждущие) — обрабатывают элементы и завершают работу стрима. Терминальный оператор в цепочке может быть только один.

Промежуточные операторы
Общая идея промежуточных операторов "в цепочке" вам уже слегка знакома. Именно так может быть устроена работа со строками.

filter(Predicate predicate) фильтрует стрим, пропуская только те элементы, что проходят по условию

Predicate - встроенный функциональный интерфейс. "Что-то", возвращающее true или false - например, лямбда-функция);

map(Function mapper) даёт возможность создать функцию, с помощью которой мы будем превращать каждый элемент в какой-то другой

Функциональный интерфейс Function<T,R> представляет функцию перехода от объекта типа T к объекту типа R.

limit(long maxSize) ограничивает стрим по количеству элементов

skip(long n) пропускает n элементов

sorted() или sorted(Comparator comparator) сортирует стрим

distinct() возвращает только уникальные элементы

Терминальные операторы
forEach(Consumer action)

Consumer - "Потребитель" - функциональный интерфейс, описывающий действие с каждым элементом.

count() возвращает количество элементов стрима

collect(Collector collector) собирает итог в список, множество или другую коллекцию, объединяет в строку...

findFirst() вытаскивает первый элемент стрима

allMatch(Predicate predicate) возвращает true, если все элементы стрима удовлетворяют условию predicate

anyMatch(Predicate predicate) возвращает true, если хотя бы один элемент стрима удовлетворяет условию predicate

noneMatch(Predicate predicate) возвращает true, если ни один элемент стрима не удовлетворяет условию predicate

Коллекторы
Некоторые коллекторы уже описаны в классе Collectors (документация).

toList() собирает элементы в List
toSet() cобирает элементы в множество
counting() подсчитывает количество элементов
joining() собирает элементы в одну строку
joining(CharSequence delimiter)
joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)
Пример
Возьмём числа 50, 60, 70, 80, 90, 100, 110, 120.

Отберём те из них, которые меньше 90.

Добавим к каждому отобранному по 10.

Распечатаем первые три получившихся числа.

Без потоков:

int[] arr = {50, 60, 70, 80, 90, 100, 110, 120};
int count = 0;
for (int x : arr) {
  if (x >= 90) {
    continue;
  }
  x += 10;
  count++;
  if (count > 3) {
    break;
  }
  System.out.println(x);
}
С потоками (и красивыми переносами для большей понятности):

int[] arr = {50, 60, 70, 80, 90, 100, 110, 120};
Arrays.stream(arr)
    .filter(x -> x < 90)
    .map(x -> x + 10)
    .limit(3)
    .forEach(System.out::println);
С потоками, но без красивых переносов:

IntStream.of(50, 60, 70, 80, 90, 100, 110, 120).filter(x -> x < 90).map(x -> x + 10).limit(3)
    .forEach(System.out::print);

***********************************************************************************************************

Задача 1
Используя стримы написать метод, принимающий предложение (строку) и букву и возвращающий количество слов, начинающихся с этой буквы. Слова в предложении разделены пробелами
Пример: " aaaaaaaaaa adfr gggg brtz a" -> 3

Задача 2
Используя стримы написать метод, проверяющий является ли строка числом ( строковым представлением числа).
Метод принимает строку и возвращает boolean.
Пример: "12345" - true
"abc14" - false

При решении задач Вам могут также понадобиться методы класса String и Character startsWith и isDigit

************************************************************************************************************

code/homework56/src/Transformer.java
public class Transformer {

    /*
    Задача
Дана строка, состоящая из слов, разделенных пробелом. Написать метод, позволяющий изменять слова в строке следующим образом:
при длине слова = 3, изменять все буквы слова на заглавные
при длине слова =4, изменять все буквы слова на строчные
при длине слова =5, изменять все буквы слова на звездочки

Сделать два варианта решения:

с использованием свойств наследования классов
с использованием интерфейсов.
Протестировать.
     */

    public static String transform( String input, WordsTransformer t){
        String[] words = input.split(" ");

        for( int i = 0; i < words.length; i++){
            if(t.check(words[i])){
                words[i] = t.transform(words[i]);
            }
        }
        return String.join(" ",words);
    }


}

***********************************************************************************************************

code/homework56/src/TransformerTest.java
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class TransformerTest {
    private  Transformer transformer = new Transformer();
    String input = "aaa BBBB dDD cccCc eee";


    @Test
    public void  test_transform_zeroLength(){
        String zero ="";
        assertEquals(zero,Transformer.transform(zero,new WordsTransformerLowerCase()));
    }


    @Test
    public void  test_transform_lowerCase(){
        String expected ="aaa bbbb dDD cccCc eee";
        assertEquals(expected,Transformer.transform(input,new WordsTransformerLowerCase()));
    }


    @Test
    public void  test_transform_upperCase(){
        String expected ="AAA BBBB DDD cccCc EEE";
        assertEquals(expected,Transformer.transform(input,new WordsTransformerUpperCase()));
    }


    @Test
    public void  test_transform_star(){
        String expected ="aaa BBBB dDD ***** eee";
        assertEquals(expected,Transformer.transform(input,new WordsTransformerStar()));
    }


    @Test
    public void  test_transform_noChange(){
        String str ="aaa BBBB dDD rrrrrrrrrrr eee";
        assertEquals(str,Transformer.transform(str,new WordsTransformerStar()));
    }

}
code/homework56/src/WordsTransformer.java
public abstract class WordsTransformer {

    public abstract boolean check( String input);
    public abstract String transform( String string);
}
code/homework56/src/WordsTransformerLowerCase.java
public class WordsTransformerLowerCase extends WordsTransformer {
    @Override
    public boolean check(String input) {
        return input.length() == 4;
    }

    @Override
    public String transform(String string) {
        return string.toLowerCase();
    }
}

*********************************************************************************************************

code/homework56/src/WordsTransformerStar.java
public class WordsTransformerStar extends WordsTransformer{
    @Override
    public boolean check(String input) {
        return input.length() == 5;
    }

    @Override
    public String transform(String string) {
        return "*****";
    }
}

***********************************************************************************************************

code/homework56/src/WordsTransformerUpperCase.java
public class WordsTransformerUpperCase extends WordsTransformer{
    @Override
    public boolean check(String input) {
        return input.length() == 3;
    }

    @Override
    public String transform(String string) {
        return string.toUpperCase();
    }
}

*************************************************************************************************************

code/interfaces/src/Main.java
public class Main {
    public static void main(String[] args) {
        String input = "AAA bbbb dDD cccCc eee";


        WordsChecker wordsChecker1 = new ToUpperCaseChecker();
        System.out.println(transform(input,wordsChecker1));

        WordsChecker wordsChecker2 = new ToLowerCaseChecker();
        System.out.println(transform(input,wordsChecker2));
    }


    public static String transform( String input, WordsChecker t){
        String[] words = input.split(" ");

        for( int i = 0; i < words.length; i++){
            if(t.checkWord(words[i])){
                words[i] = t.transformWord(words[i]);
            }
        }
        return String.join(" ",words);
    }


}

************************************************************************************************************

code/interfaces/src/ToLowerCaseChecker.java
public class ToLowerCaseChecker implements WordsChecker {
    @Override
    public boolean checkWord(String word) {
        return word.length() == 3;
    }

    @Override
    public String transformWord(String word) {
        return word.toLowerCase();
    }
}

************************************************************************************************************

code/interfaces/src/ToUpperCaseChecker.java
public class ToUpperCaseChecker implements WordsChecker{
    @Override
    public boolean checkWord(String word) {
        return word.length() == 4;
    }

    @Override
    public String transformWord(String word) {
        return word.toUpperCase();
    }
}

*************************************************************************************************************

code/interfaces/src/WordsChecker.java
public interface WordsChecker {

    boolean checkWord( String str);
    String transformWord( String str);
}

*************************************************************************************************************

code/stream_api/src/Car.java
public class Car {

    private  String brand;
    private  int price;

    public Car(String brand, int price) {
        this.brand = brand;
        this.price = price;
    }

    public String getBrand() {
        return brand;
    }

    public void setBrand(String brand) {
        this.brand = brand;
    }

    public int getPrice() {
        return price;
    }

    public void setPrice(int price) {
        this.price = price;
    }
}

**************************************************************************************************************

code/stream_api/src/CarComparator.java
import java.util.Comparator;

public class CarComparator implements Comparator<Car> {
    @Override
    public int compare(Car a, Car b) {
        return a.getBrand().toUpperCase().compareTo(b.getBrand().toUpperCase());
    }
}

************************************************************************************************************

code/stream_api/src/Main.java
import java.util.*;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Main {
    //Stream API
    /*
     Ключевым в Stream API  является пониятие  потока данных. Поток в данном случае представляет
     собой "канал" передачи данных из источника, которым могут являться коллекции, массивы, файлы, стринги
     */
    public static void main(String[] args) {
        int[] ints = {-3,-2,8,-7,2,9};

        int counter = 0;

        for ( int i: ints){
            if(i > 0)
                counter++;
        }
        System.out.println(counter);


    long count = IntStream.of(-3,-2,8,-7,2,9).filter(i->i>0).count();
        System.out.println(count);

        //  В основе Stream API  находится интерфейс BaseStream, определяющий базовые функции для работы с потоками
         /* От него наследуются следующие интерфейсы :
                Stream<T> - для работы с потоками данных ссылочного типа
                IntStream -  для потоков данных типа int
                DoubleStream -  типа double
                LongStream -  типа long

         */

        // Способы создания стримов
        //  пустой стрим
       Stream<String> streamEmpty = Stream.empty();

       // стрим коллекции
        List<String> list = Arrays.asList("a","b","c");
        Stream<String> listStream =list.stream();

      //  стрим массива
      String[]  arr = {"a","b","c"} ;
      Stream<String> straemArr =Arrays.stream(arr);

      // стрим строк
       IntStream streamChars = "abc".chars();


       // При работе со стримами все операции бывают  либо промежуточными ( intermediate) либо терминальными(terminal)
        /*
        Промежуточные опреации возвращают измененный поток данных. Промежуточных операций  может быть в цепочке несколько
        . Терминальная опреация может быть только одна и после нее уже нельзы применить другие промежуточные опреации.

        Отличия потоков от коллекций :

        1. Потоки не хранят элементы
        2. Операции с потоками не меняют источник данных
        3. Выполнение всех опреаций с потоком происходит только когда выполняется терминальная  операция ( отложенное
            выполнение)

            Операции над потоками :

            Перебор элементов . Метод forEach() - терминальная операция, осуществляющая действие для каждого элемента
            потока

         */
       Stream<String> namesStream = Stream.of("John","Bill","Jack","Ann");
       namesStream.forEach(System.out::println);
     //  namesStream.forEach(System.out::println);
        Stream.of("John","Bill","Jack","Ann").forEach(System.out::println);

        // фильтрация. Метод filter() -  промежуточная опреация. Принимает условие ( предикату) и возвращает поток
        // из элементов, лтвечающих этому условию.

        System.out.println("filtered");

        Stream.of("John","Bill","Jack","Ann").filter(s->s.length() == 4)
                                                    .forEach(System.out::println);

        Car car1 = new Car("mercedes",100000);
        Car car2 = new Car("volvo",70000);
        Car car3 = new Car("Opel",30000);
        Car car4 = new Car("bmw",150000);
        Car car5 = new Car("acura",150000);
        List<Car> cars = new ArrayList<>();
        cars.add(car1);
        cars.add(car2);
        cars.add(car3);
        cars.add(car4);
        cars.add(car5);

        cars.stream().filter(car -> car.getPrice() > 80000)
                .forEach(car-> System.out.println(car.getBrand()));


        System.out.println("print car brands");
        // метод map() - функция преобразования одного обьекта в другой.
        cars.stream()
                .map(Car::getBrand) //  названия машин
                .forEach(System.out::println);


        cars.stream()
                .map(car -> "brand: "+car.getBrand() +" price: "+car.getPrice())
                .forEach(System.out::println);


        System.out.println("Sorted");
        //  sort -  сортировка данных
         List<String> names = new ArrayList<>();
        Collections.addAll(names,"John","Jack","Benjamin","ann","Evgeny");
        names.stream().filter(s->s.length()<7)
                .sorted()
                .forEach(System.out::println);

        System.out.println("With comparator");

        cars.stream()
                .sorted(new CarComparator())
                .forEach(car -> System.out.println(car.getBrand()));

        // метод distinct() - возвращает только уникальгые элементы
        names.add("John");
        names.add("ann");
        System.out.println(names);

        names.stream()
                .distinct()
                .forEach(System.out::println);


        // Терминальные операции
        //  метод count() -  возвращает количество элементов в потоке

        System.out.println(names.stream().filter(n -> n.length()<=5).count());
        System.out.println(names.stream().count());

        // findFirst - находит 1 элемент потока
        // и FindAny - находит случайный элемент потока

       Optional<String> first = names.stream().findFirst();
        System.out.println(first.get());//John

        Optional<String> any = names.stream().findAny();
        System.out.println(any.get());

        // allMatch, anyMatch, noneMatch.  Принимают предикату и возвращают булеан.

        // allMatch - true, если все элементы потока удовлетворяют условию в предикате
        // anyMatch - true, если хотя бы один элемент потока удовлетворяет условию в предикате
        // noneMatch -возвращает true, если ни один элемент потока не удовлетворяет условию в предикате

        boolean anyMatch = names.stream().anyMatch(s -> s.length() == 4);
        boolean allMatch = names.stream().allMatch(s -> s.length() > 2);
        boolean noneMatch = names.stream().noneMatch(s -> s == "Kirill");
        System.out.println(anyMatch);
        System.out.println(allMatch);
        System.out.println(noneMatch);
    }








}