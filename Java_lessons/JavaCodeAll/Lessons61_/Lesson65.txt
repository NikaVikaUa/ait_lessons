code/git_basics/src/Main.java
public class Main {

    /*
    GIT

    git repository - репозиторий
    commit  коммит
    pull - спулить
    push - запушить

    untracked - неотслеживаемый
    modified - измененный
    staged - подготовленный
    commited - закомиченный
     */
}
code/homework65/src/Main.java
import java.util.ArrayList;
import java.util.List;

public class Main {

    /*
    Тараканьи бега
Есть 10 тараканов. Им необходимо пробежать 10 см. Каждый сантиметр таракан пробегает за от 100 до 150 милисекунд,
тараканы бегут одновременно.
Составить таблицу пробега (в которой укадано имя таракана и его результат)
     */
    public static void main(String[] args) throws InterruptedException{
        List<Score> scores = new ArrayList<>();

        List<Tarakan> tarakans = new ArrayList<>();

        long startTime = System.currentTimeMillis();

        for (int i = 0; i < 10; i++){
            Tarakan tarakan = new Tarakan(100,150,10,startTime,"Tarakan_"+i,scores);
            tarakans.add(tarakan);
        }

        for(Tarakan tarakan: tarakans){
            tarakan.start();
        }

        for( Tarakan tarakan: tarakans){
            tarakan.join();
        }

        System.out.println(scores);
    }
}
code/homework65/src/Score.java
public class Score {
    String name;
    long time;

    public Score(String name, long time) {
        this.name = name;
        this.time = time;
    }

    public String toString(){
        return name + " ran the distance for "+ time + " milliseconds\n";
    }
}
code/homework65/src/Tarakan.java
import java.util.List;
import java.util.Random;

public class Tarakan extends Thread{

    final int minStepTime;
    final int maxStepTime;
    final int distance;
    final long startTime;
    final String name;

    final List<Score> scores;
    Random rnd = new Random();


    public Tarakan( int minStepTime, int maxStepTime, int distance, long startTime, String name, List<Score> scores){
        this.minStepTime = minStepTime;
        this.maxStepTime = maxStepTime;
        this.distance = distance;
        this.startTime = startTime;
        this.name = name;
        this.scores = scores;

    }

    public void run(){
        for( int i = 0; i < distance; i++){

            int stepTime = rnd.nextInt( maxStepTime - minStepTime +1) + minStepTime;

            try {
                Thread.sleep(stepTime);
            }catch (InterruptedException e){
                e.getMessage();
            }
        }
        long distanceTime = System.currentTimeMillis() - startTime;
        Score score = new Score(name,distanceTime);

        synchronized (scores){
            scores.add(score);
        }
    }
}