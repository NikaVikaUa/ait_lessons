Задачи на урок:
Обсуждение и разбор дз
Практика, решение задач

******************************************************************************************************************

Задача 1
Доделать задачу 2 (см. код урока, Practice)

*****************************************************************************************************************

code/main61/src/FileClassUsage.java
import java.io.File;
import java.io.IOException;

public class FileClassUsage {

    // класс File -  управляет информацией о файлах. Класс Файл  работает как с
    // файлами так  и с каталогами
    // котнструкторы :
    /*
    File( String путь к каталогу)
    File (File directory, String file name)
    File dir1 = new File( "C://dirName)

    основные методы класса File:

    boolean createNewFile() -  создает новый файл в соответствии с переданным
     в конструктор путем к нему

    boolean delete() - удаляет каталог или файл
    boolean exists() -  проверяет существует ли файл
    String getAbsolutePath()  - возвращает абсолютный путь к файлу
    String getName()  -возвращает имя файла или каталога
    boolean isDirectory() - true if dir
    boolean isFile() - true if file
    long length() - размер в байтах
    String[] list() -  возвращает массив файлов и подкаталогов, находящихся в определенном каталоге
    File[] listFiles() - возвращает массив файлов и подкаталогов, находящихся в определенном каталоге
     */
    public static void main(String[] args) throws IOException {
        File file = new File("example.txt");
        System.out.println("File name: " + file.getName());
        System.out.println("does file exist? " + file.exists());
        System.out.println("File size: " + file.length());
        System.out.println(file.createNewFile());
        System.out.println("does file exist? " + file.exists());
        System.out.println("File size: " + file.length());
        System.out.println(file.delete());
        System.out.println("does file exist? " + file.exists());

        File dirC = new File("C://");
        // dirC.listFiles(new );


    }


}

**************************************************************************************************************

code/main61/src/Homework.java
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class Homework {
    public static void main(String[] args) throws IOException {

        File fileName = new File("input.txt");

        System.out.println(readIntoString(fileName));
        System.out.println(returnSum("inputInt.txt"));
        System.out.println("the longest string is " + findLongestLine(fileName));
    }


    /*
    Задача 1
Написать метод, читающий текстовый файл и возвращающий строку,
состоящую из строчек этого файла, разделенных пробелом.
     */

    public static String readIntoString(File fileName) throws IOException {

        StringBuilder sb = new StringBuilder();

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String line;

            while ((line = br.readLine()) != null) {
                sb.append(line);
                sb.append(" ");
            }
        }
        return new String(sb);
    }

    /*
    Есть файл такого вида
       1
       2
       3
       4
       5
       Написать метод, принимающий этот файл и возвращающий сумму чисел.
     */

    public static int returnSum(String fileName) {
        int sum = 0;
        String nextInt;

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            while ((nextInt = br.readLine()) != null) {
                sum = sum + Integer.parseInt(nextInt);
            }

        } catch (IOException e) {
            e.getMessage();
        }
        return sum;
    }

    /*
    Написать метод, принимающий текстовый файл и находящий самую длинную строку в нем.
    Метод возвращает эту строку */
    public static String findLongestLine(File fileName) {
        String longest = "";

        try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
            String current;

            while ((current = br.readLine()) != null) {
                if (current.length() > longest.length())
                    longest = current;
            }
        } catch (IOException e) {
            e.getMessage();
        }
        return longest;
    }
}

*****************************************************************************************************************

code/practice61/src/Person.java
public class Person implements Comparable<Person> {
    String name;
    int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }

    @Override
    public int compareTo(Person person) {
        return this.age - person.age;
    }
}

**************************************************************************************************************

code/practice61/src/Practice.java
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Practice {
    public static void main(String[] args) {
        System.out.println(composeList("classPeople.txt"));
    }

    /*
      1.  Пусть есть текстовый файл такого вида
        John, 25
        Jack, 37
        Ann, 18

        написать метод, читающий этот файл и возвращающий список людей старше 18 лет,
        отсортированный по возрасту.
        Файл не пустой
            List<Person> composeList( String fileName)
*/
    public static List<Person> composeList(String fileName) {
        List<Person> persons = new ArrayList<>();
        List<String> temp = new ArrayList<>();


        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(fileName))) {
            String line;

            while ((line = bufferedReader.readLine()) != null) {
                temp.add(line);
            }
        } catch (IOException e) {
            e.getMessage();
        }

        for (String s : temp) {
            String[] nameAge = s.split(",");
            int age = Integer.parseInt(nameAge[1].trim());
            if (age > 18)
                persons.add(new Person(nameAge[0].trim(), age));
        }
        Collections.sort(persons);

        return persons;
    }
    /*
     2. Пусть есть текстовый  файл такого вида:  имя, фамилия, оборудование, цена ( имена могут
        повторяться)
        Evgeny, Grazhdanskiy, Notebook, 500
        John, Smith, Mac, 800
        Evgeny, Grazhdanskiy, Keybord, 25
        John, Smith, Mouspad,5
        Jack, Burns, Apple, 1000


        Нужно написать  метод,  который запишет эту информацию в выходной файл в таком виде:
        имя фамилия сумма позиций
        Evgeny Grazhdanskiy 525
        John Smith 805
        Jack Burns 1000

     */

}

*****************************************************************************************************************

code/practice61/src/PracticeTest.java
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class PracticeTest {

    private Practice practice;

    @BeforeEach
    public void init() {
        practice = new Practice();
    }

    @Test
    public void test_composeList() {
        List<Person> people = Practice.composeList("classPeople.txt");
        assertEquals("Jack", people.get(0).name);
        assertEquals(30, people.get(0).age);
        assertEquals("John", people.get(1).name);
        assertEquals(45, people.get(1).age);
    }

}