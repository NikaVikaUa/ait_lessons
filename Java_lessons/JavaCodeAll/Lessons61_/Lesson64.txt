План на урок
Разбор домашнего задания
Multithreading, wait-notify
Multithreading, deadLock problem
Multithreading, daemon threads

************************************************************************************************************

Иногда при взаимодействии потоков встает вопрос о извещении одних потоков о действиях других. Например, действия одного потока зависят от результата действий другого потока, и надо как-то известить один поток, что второй поток произвел некую работу. И для подобных ситуаций у класса Object определено ряд методов:
wait(): освобождает монитор и переводит вызывающий поток в состояние ожидания до тех пор, пока другой поток не вызовет метод notify()

notify(): продолжает работу потока, у которого ранее был вызван метод wait()

notifyAll(): возобновляет работу всех потоков, у которых ранее был вызван метод wait()

Deadlock (взаимная блокировка), это проблема вызванная ошибкой в проектировании синхронизации многопоточных аппликаций. Суть проблемы, когда один из конкурирующий потоков захватил монитор, и чтобы его освободить, он должен пройти в synchronized блок, монитор которого захвачен вторым потоком. При этом второй поток, не может освободить монитор, т. к. для этого ему надо пройти в synchronized блок, монитор которого захвачен первым потоком.
Демон треды, обычно представляют из себя задачи работающие в фоновом режиме на протяжении всего жизненного цикла аппликации. Они автоматически завершают свою работу, вместе с завершением работы последнего не демон треда. Создать демон тред можно следующим образом: thread.setDeamon(true). Сделать это необходимо до старта треда.

****************************************************************************************************************

Задача 1
Тараканьи бега
Есть 10 тараканов. Им необходимо пробежать 10 см. Каждый сантиметр таракан пробегает за от 100 до 150 милисекунд, тараканы бегут одновременно.
Составить таблицу пробега (в которой укадано имя таракана и его результат)

**************************************************************************************************************

code/homework64/src/AbstractClerk.java
import java.util.Random;

public abstract class AbstractClerk implements Runnable {

    protected String name;
    protected int minTime;
    protected int maxTime;
    protected int creditsNum;
    protected long finishTime;

    protected Random random = new Random();

    public AbstractClerk(String name, int minTime, int maxTime, int creditsNum) {
        this.name = name;
        this.minTime = minTime;
        this.maxTime = maxTime;
        this.creditsNum = creditsNum;
    }

    public long getFinishTime() {
        return finishTime;
    }

    public String getName() {
        return name;
    }
}

******************************************************************************************************************

code/homework64/src/LazyInspiredClerk.java
public class LazyInspiredClerk extends AbstractClerk {
    private static int INSPIRATION_PROBABILITY = 20;
    private static int INSPIRATION_TIMES = 3;

    private double inspirationCoef;

    public LazyInspiredClerk(String name, int minTime, int maxTime, int creditsNum, double inspirationCoef) {
        super(name, minTime, maxTime, creditsNum);
        this.inspirationCoef = inspirationCoef;
    }


    @Override
    public void run() {
        int inspiredCreditsMore = 0;

        for (int i = 0; i < creditsNum; i++) {
            int timeToSleep;

            if (inspiredCreditsMore == 0 && random.nextInt(100) > INSPIRATION_PROBABILITY) {
                inspiredCreditsMore = INSPIRATION_TIMES;
            }

            if (inspiredCreditsMore > 0) {
                timeToSleep = (int) ((minTime + random.nextInt(maxTime - minTime)) / inspirationCoef);
                inspiredCreditsMore--;
            } else {
                timeToSleep = minTime + random.nextInt(maxTime - minTime);
            }

            try {
                Thread.sleep(timeToSleep);
            } catch (InterruptedException e) {
                return;
            }

        }
        finishTime = System.currentTimeMillis();

    }
}

***************************************************************************************************************

code/homework64/src/Main.java
public class Main {
    //  Сотрудники банка выдают кредиты. Причем каждый выдает в опреденном диапазоне времени - минимальное время и макс.
    /*
    время нужное ему для выдачи кредита. minTime  and maxTime
    При этом есть один сотрудник, у которого неожиданно возрастает работоспособность и он начинает выдавать кредиты быстрее.
    А затем скорость опять может снизиться до обычной.
    Посчитать время , за которое каждый сотрудник выдаст n  кредитов.
     */

    private static final int MIN_TIME = 100;
    private static final int MAX_TIME = 150;
    private static final int CREDITS_NUM = 20;

    public static void main(String[] args) throws InterruptedException {
        AbstractClerk mary = new RegularClerk("Mary",
                (int) (MIN_TIME / 1.2),
                (int) (MAX_TIME / 1.2),
                CREDITS_NUM);
        AbstractClerk peter = new RegularClerk("Peter", MIN_TIME, MAX_TIME, CREDITS_NUM);
        AbstractClerk john = new LazyInspiredClerk("John",
                MIN_TIME,
                MAX_TIME,
                CREDITS_NUM,
                1.5);

        AbstractClerk[] clerks = {mary, peter, john};

        Thread th1 = new Thread(mary);
        Thread th2 = new Thread(peter);
        Thread th3 = new Thread(john);

        long startTime = System.currentTimeMillis();
        th1.start();
        th2.start();
        th3.start();

        th1.join();
        th2.join();
        th3.join();

        for (int i = 0; i < clerks.length; i++) {
            System.out.println(" The clerk named " + clerks[i].getName() + " issued " + " all credits for " +
                    (clerks[i].getFinishTime() - startTime));
        }
    }
}

*********************************************************************************************************

code/homework64/src/RegularClerk.java
public class RegularClerk extends AbstractClerk {

    public RegularClerk(String name, int minTime, int maxTime, int creditsNum) {
        super(name, minTime, maxTime, creditsNum);
    }

    public void run() {
        for (int i = 0; i < creditsNum; i++) {
            int toSleep = minTime + random.nextInt(maxTime - minTime);

            try {
                Thread.sleep(toSleep);
            } catch (InterruptedException e) {
                return;
            }
        }
        finishTime = System.currentTimeMillis();
    }
}

************************************************************************************************************

code/philosophers/src/Main.java
public class Main {

    /*
    while(true) {

    think()

    pick up left fork
    pick up right fork
    eat
    put down right fork
    put down left fork
    }
     */
    public static void main(String[] args) {
        Philosopher[] philosophers = new Philosopher[5];
        Object[] forks = new Object[philosophers.length];

        for (int i = 0; i < forks.length; i++) {
            forks[i] = new Object();
        }

        for (int i = 0; i < philosophers.length; i++) {
            Object leftFork = forks[i];
            Object rightFork = forks[(i + 1) % forks.length];

            if (i == philosophers.length - 1) {
                philosophers[i] = new Philosopher(rightFork, leftFork);
            } else {
                philosophers[i] = new Philosopher(leftFork, rightFork);
            }
            new Thread(philosophers[i], "Philosopher " + (i + 1)).start();
        }
    }
}

**************************************************************************************************************

code/philosophers/src/Philosopher.java
import java.util.Random;

public class Philosopher implements Runnable {

    private Object leftFork;
    private Object rightFork;

    private Random random = new Random();

    public Philosopher(Object leftFork, Object rightFork) {
        this.leftFork = leftFork;
        this.rightFork = rightFork;
    }

    public void run() {
        try {

            while (true) {
                doAction("thinking");
                synchronized (leftFork) {
                    doAction("picked up left fork");
                    synchronized (rightFork) {
                        doAction("picked up right fork");
                        doAction("eating");
                        doAction("put down right fork");
                    }
                    doAction("put down left fork");
                }
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }

    private void doAction(String action) throws InterruptedException {
        System.out.println(Thread.currentThread().getName() + " " + action);
        Thread.sleep(random.nextInt(1000));
    }
}

****************************************************************************************************************

code/wait_notify/src/Data.java
public class Data {

    private String packet;

    // True - если приемник должен ждать
    // false -  если передатчик должен ждать
    private boolean transfer = true;

    public synchronized String receive() {
        while (transfer) {
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println("Interrupted");
            }
        }

        String returnPacket = packet;

        transfer = true;

        notifyAll();

        return returnPacket;
    }


    public synchronized void send(String packet) {
        while (!transfer) {
            try {
                wait();
            } catch (InterruptedException e) {
                System.out.println("Interrupted");
            }
        }  // here

        this.packet = packet;

        transfer = false;
        notifyAll();

    }
}

*************************************************************************************************************

code/wait_notify/src/Main.java
public class Main {
    // wait() - текущий поток будет ждать сколько потребуется пока другой поток не
    // уведомит его с помощью метода notify()     что можно продолжать работу.
    /* wait( long time) -   по истечении времени time  поток выйдет из состояния ожидания автоматически
       notify() - будит выбранный случайным образом поток, уведомляя что монитор обьекта, который он ждет освободился
       notifyAll() - будит все потоки

         Приемник -передатчик
         Пусть есть передатчик, передающий пакет данных приемнику.
         Приемник не должен начинать обработку данных до момента окончания отправки этого пакета данных передатчиком
         Передатчик не должен отправлять следующий пакет до момента окончания обработки предыдущего пакета приемником
     */
    public static void main(String[] args) {
        Data data = new Data();

        Thread sender = new Thread(new Sender(data));
        Thread receiver = new Thread(new Receiver(data));

        sender.start();
        receiver.start();
    }
}

****************************************************************************************************************

code/wait_notify/src/Receiver.java
public class Receiver implements Runnable {
    private Data load;

    public Receiver(Data load) {
        this.load = load;
    }

    public void run() {
        for (String receivedMessage = load.receive();
             !"End".equals(receivedMessage);
             receivedMessage = load.receive()) {

            System.out.println(receivedMessage);

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.getMessage();
            }
        }
    }
}

***************************************************************************************************************

code/wait_notify/src/Sender.java
public class Sender implements Runnable {

    private Data data;

    public Sender(Data data) {
        this.data = data;
    }

    public void run() {
        String packets[] = {
                "First packet",
                "Second packet",
                "Third packet",
                "Fourth packet",
                "End"
        };

        for (String packet : packets) {
            data.send(packet);

            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.getMessage();
            }

        }
    }
}