Задачи на урок:
Разбор ДЗ
Двоичный поиск в Джава
ООП - классы,обьекты
ООП - конструкторы
Практика, решение задач
Объектно-ориентированное программирование
Классы и объекты

Java является объектно-ориентированным языком, поэтому такие понятия как "класс" и "объект" играют в нем ключевую роль. Любую программу на Java можно представить как набор взаимодействующих между собой объектов.

Шаблоном или описанием объекта является класс, а объект представляет экземпляр этого класса. Можно еще провести следующую аналогию. У нас у всех есть некоторое представление о человеке - наличие двух рук, двух ног, головы, туловища и т.д. Есть некоторый шаблон - этот шаблон можно назвать классом. Реально же существующий человек (фактически экземпляр данного класса) является объектом этого класса.

Класс определяется с помощью ключевого слова сlass.

Конструкторы
Кроме обычных методов классы могут определять специальные методы, которые называются конструкторами. Конструкторы вызываются при создании нового объекта данного класса. Конструкторы выполняют инициализацию объекта.

Если в классе не определено ни одного конструктора, то для этого класса автоматически создается конструктор без параметров.

Если конструктор не инициализирует значения переменных объекта, то они получают значения по умолчанию. Для переменных числовых типов это число 0, а для типа string и классов - это значение null (то есть фактически отсутствие значения).
Если необходимо, чтобы при создании объекта производилась какая-то логика, например, чтобы поля класса получали какие-то определенные значения, то можно определить в классе свои конструкторы.

Задача 1
Создать класс Student c полями (переменными) имя и возраст.
Создать несколько обьектов этого класса. Вывести их на печать

Задача 2
Не обязательная задача со звездочкой из предыдущего урока

code/binary_search/src/BinarySearch.java
public class BinarySearch {
    public static void main(String[] args) {

       int[] array = {2,4,5,67,98};
        System.out.println(binarySearch(5,array));// вызов метода двоичного поиска
        System.out.println(binarySearch(456,array));// вызов метода двоичного поиска
    }

    // Двоичный поиск. Этот вид поиска требует предварительной сортировки данных.
    /*
    Алгоритм делит входной массив на равные половины и с каждым проходом цикла  сравнивает искомый элемент с
    элементом посередине. Поиск заканчивается если они равны. Иначе продолжаем искать элемент в той половине
     массива, в которой он может находиться и "отбросив" ненужную половину.  Эти действия повторяются пока элемент
     не будет найден или границы массива не сойдутся

     */ // index         0 1 2  3  4
        //int[] array = {2,4,5,67,98}; ищем 98
    static int binarySearch( int search, int[] array){

        int start = 0; // в переменной start  будет находиться индекс начала массива
        int end = array.length-1; // в переменной end  будет находиться индекс конца массива

        while(start <= end){ // условие окончания цикла

            int middle = (start + end )/2; //  определяем индекс середины массива

            if (search < array[middle]){ // если искомый элемент меньше элемента, стоящего посередине
                end = middle -1; // сдвигаем правую границу
            }

            if (search > array[middle]){
                start = middle +1; // если искомый элемент больше  элемента, стоящего посередине сдвигаем
                                    // левую границу
                }

            if (search == array[middle]) { // если искомый элемент = элементу посередине, то значит мы нашли его.
                return middle;             // программа заканчивается
            }

        }
        return  -1;
    }
}
code/enhanced_for/src/Main.java
public class Main {
    public static void main(String[] args) {
        int[] numbers = {34,56,7,23};
        numbers[3] = 5;

        System.out.println("Print array with for loop");

        for(int i = 1;i<numbers.length;i++){
            System.out.println(numbers[i]);
        }
        System.out.println("Print array with for-each");
        // цикл for-each.  Используется для перебора всех элементов массива, без учета индекса
        for(int num:numbers){ // в переменную num ( название может быть любым) последовательно
                 if(num == 34)         // записываются все значения элементов массива
                     numbers[1]=7;

            System.out.println(num);
        }


    }
}
code/homework18/src/Main.java
import java.util.Arrays;

public class Main {

    public static void main(String[] args) {
        /*
 Задача1
Есть неотсортированный массив целых чисел int[] array. Нужно отсортировать его и
вывести отсортированный массив на печать. Использовать методы класса Arrays
*/
        int[] array = {5,1,0,98,45,23};

        Arrays.sort(array);
       // System.out.println(Arrays.toString(array));


/*
Задача2
Есть массив целых чисел. Написать метод,
находящий и возвращающий количество четных чисел в этом массиве. Пример: {1, 2, 8, 7} -> количество четных чисел = 2.
         */
        int[] numbers = {1, 2, 8, 7};
        System.out.println(countEven(numbers));
    }

    static int countEven( int[] numbers){
        int counter = 0;

        for( int i = 0; i<numbers.length; i++){
            if( numbers[i] % 2 == 0){
                System.out.println("even number is "+numbers[i]);
                counter++;
            }
        }
        return counter;
    }


}
code/oop/src/Main.java
public class Main {

    public static void main(String[] args) {

     //   Scanner scanner = new Scanner(System.in);
          int a;
          String str;
          Person p1 = new Person(); // создание нового объекта класса Person
            p1.name = "John";
            p1.age = 35;
     //   System.out.println("p1 name is "+p1.name);
     //   System.out.println("p1 age is "+p1.age);
            p1.myName();
            p1.myAge();
            p1.canWalk();
            p1.canEat();


        System.out.println("p2 person");
          Person p2 = new Person();
            p2.name = "Mary";
            p2.age = 25;
     //   System.out.println("p2 name is "+p2.name);
     //   System.out.println("p2 age is "+p2.age);
        p2.myName();
        p2.myAge();
        p2.canWalk();
        p2.canEat();






    }
}
code/oop/src/Person.java
public class Person {

    Person(){} //  конструктор класса Person.  С  помощью него создаются обьекты
    // имя  констуктора пишется с большой буквы и совпадает с именем класса.

    String name;  // поле или переменная класса имя

    int  age; // поле или переменная класса возраст


    void canWalk(){
        System.out.println(name+" can walk");
    }

    void canEat(){
        System.out.println( name+" can eat");
    }

    void myName(){
        System.out.println("my name is "+name);
    }

    void myAge(){
        System.out.println("my age is "+age);
    }




}