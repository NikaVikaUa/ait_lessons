Задачи на урок:
Разбор дз
Массивы, продолжение
Сортировка пузырьком и двоичный поиск
Практика, решение задач
Сортировка пузырьком

Когда речь заходит о сортировке, первое, о чем вспоминают, это, как правило, именно сортировка пузырьком. Это связанно с тем, что данный метод сортировки самый простой как для понимания, так и для реализации.

При определенных обстоятельствах сортировка пузырьком может быть достаточно быстрой, но это только в некоторых случаях. Как правило, данный вид сортировки служит только для учебных целей.

Сортировка пузырьком заключается в следующем:

начиная с начала массива просматриваем попарно по 2 элемента (первый со вторым, второй с третим, третий с четвертым и т.д.). Если второй элемент в паре меньше первого элемента – перемещаем его на место первого, а первый на место второго. Это мы делаем для всех элементов. После того, как мы дошли до конца массива (сравнили предпоследний и последний элементы и сделали обмен, если нужно), проверяем, был ли хотя бы один обмен. Если да, значит массив не отсортирован и начинаем все сначала. Повторяем такие проходы, пока не будет так, что мы проверили попарно все элементы от начала до конца, а обмена ни одного не было. Таким образом элементы с самыми маленькими значениями потихоньку перемещаются справа налево. То есть они как будто всплывают, как мыльный пузырь. Отсюда и название метода – пузырьком.

Задача1
Есть неотсортированный массив целых чисел int[] array. Нужно отсортировать его и вывести отсортированный массив на печать. Использовать методы класса Arrays

Задача2
Есть массив целых чисел. Написать метод, находящий и возвращающий количество четных чисел в этом массиве. Пример: {1, 2, 8, 7} -> количество четных чисел = 2.

Задача3*
Есть массив положительных целых чисел нечетной длины >= 3.
Известно, что существует индекс элемента этого массива такой, что сумма всех элементов слева от него равняется сумме всех элементов справа от него.
Найти этот индекс.

code/bubble_sort/src/BubbleSort.java
import java.util.Arrays;

public class BubbleSort {

    public static void main(String[] args) {
        int[] array = {6,3,0,5};  //  создаем массив
        bubbleSort(array); // "пропускаем" его через метод сортировки

        for ( int i = 0;i<array.length;i++) {  //  выводим на экран отсортированный массив
        //    System.out.print(array[i] + " ");
        }

        System.out.println("Print new array");

            int[] array1 = {6,1,8,-56,876,235};
        //    bubbleSort(array1);
            for ( int i = 0;i<array1.length;i++){
                System.out.print(array1[i]+" ");
        }
        System.out.println();
        System.out.println("Print array1 with Arrays.toString");
        System.out.println(Arrays.toString(array1)); //  печать массива методом Arrazs.toString

        // сортировка методом Arrays.sort
        Arrays.sort(array1);
        System.out.println(Arrays.toString(array1));
    }

    /*
    Сортировка пузырьком ( Bubble sort)
    - Алгоритм просматривает массив и сравнивает каждую пару соседних элементов.
    Когда встречается пара, расположенная не по порядку, происходит замена этих
    двух элементов местами
     */
    //  Первый проход
    // 6 3 0 5  ->  3 6 0 5 -> 3 0 6 5 -> 3 0 5 6

    // Второй проход
    // 3 0 5 6 -> 0 3 5 6

    // Третий проход
    // 0 3 5 6 -> 0 3 5 6

    static void bubbleSort(int[] array) {
        boolean sorted = false; //  переменная показывает отсортирован ли массив
        int temp;

        while (!sorted) { //  цикл будет повторяться , пока sorted = false
            sorted = true;
            for (int i = 0; i < array.length - 1; i++) { // проходим по массиву
                if (array[i] > array[i + 1]) { // проверка необходимости перестановки элементов
                    // перестановка элементов местами с помощью третьей буферной переменной
                    temp = array[i]; //temp = 6  временно хранит значение элемента array[i]
                    array[i] = array[i + 1]; // array[i] = 3
                    array[i + 1] = temp; // array[i+1] = 6
                    sorted = false; //  в случае перестановки элементов sorted опять  становиться false
                }
            }

        }

    }
}
code/homework17/src/Main.java
public class Main {

    public static void main(String[] args) {



    /*
    Задача1
-Cоздать массив строк fruits (фрукты) из 4 элементов: Orange,Apple,Banana,Mango.
-Вывести созданный массив на экран используя цикл for.
-Заменить в созданном массиве значение первого элемента на Kiwi (т.е. присвоить первому элементу значение Kiwi)
-Вывести измененный массив на экран используя цикл for.
Задание можно выполнить непосредственно в методе main, не создавая отдельный метод.
*/
//                      0       1        2        3
String[] fruits =   {"Orange","Apple","Banana","Mango"};

for ( int i = 0; i< fruits.length;i++){  // вывод на экран
    System.out.println(fruits[i]);
}

fruits[1] = "Kiwi"; // замена элемента

        System.out.println("changed array");

for ( int i = 0; i< fruits.length;i++){  // вывод на экран измененного массивс
     System.out.println(fruits[i]);
        }


/*
Задача2
Используя цикл for вывести на экран все четные элементы массива fruits из первой задачи (т.е. Orange и Banana).
Задание можно выполнить непосредственно в методе main либо создать отдельный метод.

*/

        System.out.println("print even elements");

        for( int i = 0;i<fruits.length; i++){
            if(i % 2 == 0){
                System.out.println(fruits[i]);
            }
        }


/*
Задача3*
Дан массив целых чисел. Написать метод, возвращающий разность между наибольшим и наименьшим элементами массива.
public static int countDif(int[] ints)
пример: {4,2,5,8} -> результат 6, т.к. 8 (максимальный)- 2(минимальный)=6

    */

        int[] numbers = {4,2,5,8};
        System.out.println("difference between max and min is "+countDifference(numbers));

        int[] empty = {};
        System.out.println("Index is " + findIndex(numbers,5)); //2
        System.out.println("Index in the empty array is " + findIndex(empty,5));//-1
        System.out.println("Index of 345 is " + findIndex(numbers,345));//-1


    }
    //{4,2,5,8}
    static int countDifference (int[] numbers){
        int max = numbers[0]; //  Создаем переменную max  и присваиваем ей начальное значение.
                                // в переменную макс будем записывать найденное макс. значение.
        int min = numbers[0]; //  Создаем переменную min  и присваиваем ей начальное значение.
                                // в переменную min будем записывать найденное наименьшее  значение.

        for ( int i = 1; i<numbers.length; i++){
            if ( numbers[i] > max) { // 5 > 4 ?
                max = numbers[i];  // max = 8      присавиваем переменной max  значение numbers[i] если оно больше max
            }
            else if (numbers[i] < min){ //  присавиваем переменной min  значение numbers[i] если оно меньше min
                min = numbers[i]; //min = 2
            }
        }
        return max - min;
    }

    // есть массив целых чисел. Написать метод, находящий и возвращающий  индекс заданного элемента. Если такого
    // элемента нет, то метод возвращает -1.
    // Индексы массива не бывают отрицательными
    //  0 1 2 3
    // {4,2,5,8} , 345 -> -1
    // {4,2,5,8} , 5 -> 2
    //{}
    static int findIndex ( int[] array, int n){
        if (array.length == 0){ //  проверка на отсутствие элементов в массиве
             return -1;
        }


      //  По очереди перебираем все элементы массива в цикле и сравниваем с искомым. Если найден элемент массива
        // равный искомому, то мы возвращаем его индекс и прекращаем поиск
        for ( int i = 0; i<array.length; i++){
            if ( array[i] == n){ //  проверка равенства здесь.  И выход из метода с возвратом найденного индекса
                return i;
            }
        }
        return  -1; //  в том случае, если в цикле элемент не найден, то возвращается -1
    }

}