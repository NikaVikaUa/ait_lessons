Задачи на урок:
Разбор дз
Break, Continue
Массивы
Решение задач
Операторы continue и break

Оператор break позволяет выйти из цикла в любой его момент, даже если цикл не закончил свою работу:

Например:

for (int i = 0; i < 10; i++){

if (i == 5)

break;

System.out.println(i); }

Когда счетчик станет равным 5, сработает оператор break, и цикл завершится.

Теперь сделаем так, чтобы если число равно 5, цикл не завершался, а просто переходил к следующей итерации. Для этого используем оператор continue:

for (int i = 0; i < 10; i++){

if (i == 5)

continue;

System.out.println(i);

В этом случае, когда выполнение цикла дойдет до числа 5, программа просто пропустит это число и перейдет к следующему. }

Массивы

Массив представляет набор однотипных значений. Объявление массива похоже на объявление обычной переменной, которая хранит одиночное значение, причем есть два способа объявления массива:

тип_данных название_массива[]; // либо тип_данных[] название_массива;

Например, определим массив чисел:

int nums[]; int[] nums2;

После объявления массива мы можем инициализовать его: int nums[]; nums = new int[4]; // массив из 4 чисел

Создание массива производится с помощью следующей конструкции: new тип_данных[количество_элементов], где new - ключевое слово, выделяющее память для указанного в скобках количества элементов. Например, nums = new int[4]; - в этом выражении создается массив из четырех элементов int, и каждый элемент будет иметь значение по умолчанию - число 0.

Также можно сразу при объявлении массива инициализировать его:

int nums[] = new int[4]; // массив из 4 чисел int[] nums2 = new int[5]; // массив из 5 чисел

При подобной инициализации все элементы массива имеют значение по умолчанию. Для числовых типов (в том числе для типа char) это число 0, для типа boolean это значение false, а для остальных объектов это значение null. Например, для типа int значением по умолчанию является число 0, поэтому выше определенный массив nums будет состоять из четырех нулей.

Однако также можно задать конкретные значения для элементов массива при его создании:

// эти два способа равноценны int[] nums = new int[] { 1, 2, 3, 5 };

int[] nums2 = { 1, 2, 3, 5 };

Стоит отметить, что в этом случае в квадратных скобках не указывается размер массива, так как он вычисляется по количеству элементов в фигурных скобках.

После создания массива мы можем обратиться к любому его элементу по индексу, который передается в квадратных скобках после названия переменной массива:

int[] nums = new int[4]; // устанавливаем значения элементов массива nums[0] = 1; nums[1] = 2; nums[2] = 4; nums[3] = 100;

// получаем значение третьего элемента массива System.out.println(nums[2]); // 4

Индексация элементов массива начинается с 0, поэтому в данном случае, чтобы обратиться к четвертому элементу в массиве, нам надо использовать выражение nums[3].

И так как у нас массив определен только для 4 элементов, то мы не можем обратиться, например, к шестому элементу: nums[5] = 5;. Если мы так попытаемся сделать, то мы получим ошибку.

Важнейшее свойство, которым обладают массивы, является свойство length, возвращающее длину массива, то есть количество его элементов:

int[] nums = {1, 2, 3, 4, 5}; int length = nums.length; // 5

Задача1
-Cоздать массив строк fruits (фрукты) из 4 элементов: Orange,Apple,Banana,Mango.
-Вывести созданный массив на экран используя цикл for.
-Заменить в созданном массиве значение первого элемента на Kiwi (т.е. присвоить первому элементу значение Kiwi)
-Вывести измененный массив на экран используя цикл for.
Задание можно выполнить непосредственно в методе main, не создавая отдельный метод.

Задача2
Используя цикл for вывести на экран все четные элементы массива fruits из первой задачи (т.е. Orange и Banana).
Задание можно выполнить непосредственно в методе main либо создать отдельный метод.

Задача3*
Дан массив целых чисел. Написать метод, возвращающий разность между наибольшим и наименьшим элементами массива.
public static int countDif(int[] ints)
пример: {4,2,5,8} -> результат 6, т.к. 8 (максимальный)- 2(минимальный)=6

code/continue_break/src/Main1.java
public class Main1 {

    // Continue statement
    /*
    Continue используется внутри цикла. Если в цикле встречается continue,
    то контроль передается непосредственно в начало цикла и происходит выполнение
    следующей итерации ( прохода цикла), а оставшиеся  после continue команды
    пропускаются
     */
    public static void main(String[] args) {

        for ( int i = 0 ; i <= 6; i++){

            if ( i == 4){
                continue;
            }

       //     System.out.print(i+" ");

        }

        // break -
      /*
         используется для немедленного выхода из цикла. Если программа встречает
         в цикле слово break,  выполнение цикла прекращается и начинается выполнение кода следующего за циклом.
       */

        for (int i = 100; i>=10;i--){

            System.out.println("i: "+i);

            if(i ==98){
                break;
            }
        }
        System.out.println("we are out of for-loop");
    }

}
code/homework16/src/Main.java
public class Main {

    public static void main(String[] args) {
      //  System.out.println(countSumOfN(6));
        printTriangle(25);
    }

    /*
    С помощью цикла For написать метод,
    возвращаюший сумму всех четных целых чисел от 1 до заданного числа n
     */

    static int countSumOfN( int n){
        int sum = 0;

        for( int i = 1;i <= n;i++){

            if( i % 2 == 0) {
                sum = sum + i;
            }
        }
      return sum;
    }

    /*
    С помощью вложенного цикла For (цикл в цикле) написать метод, выводящий на экран треугольник такого вида:

1
12
123
1234
12345
123456
     */

    static void printTriangle (int n){
      //  int n = 8;
        for (int i = 1; i <= n; i++){ // i=3
            for ( int j = 1; j <= i; j++){
                System.out.print(j); // 12
            }
            System.out.println();

        }
    }
}
code/our_arrays/src/Main.java
public class Main {

    //Array - массив
    /*
    type[] array-name = new type[ size]
     */
    public static void main(String[] args) {
        // первый способ
        int[] sample;
        sample = new int[10];
      //  0     1   2   3   4   5  6  7  8  9  индексы массива
     //   10 , 20 ,30 , 40 ,50,60,70,80,90,100 элементы массива
     //  индексы элементов массива начинаются с нуля и увеличиваются
     // на единицу также как и в случае со строками

        // H e l l o
        // 0 1 2 3 4
        // charAt(0)
       int firstElement = sample[0];

        // int[] sample;
        // int []sample
        // int sample [];

        sample[0] = 10;
        sample[1] = 20;
        sample[2] = 30;
        sample[3] = 40;
        sample[4] = 50;
        sample[5] = 60;
        sample[6] = 70;

        // второй способ обьявить массив и присвоить значения его элементам
      //  int[] numbers = new int[]{19,23,56,2,7,89};

        //  третий способ обьявить массив и приcвоить значения его элементам
      //  int[] numbers ={11,22,33,44,55};
      /*  System.out.println(numbers[0]);
        System.out.println(numbers[1]);
        System.out.println(numbers[2]);
        System.out.println(numbers[3]);
        System.out.println(numbers[4]);*/

        // метод length - размер массива
        String hello = "Hello";
        hello.length();
        int[] numbers ={11,22,33,44,55,66,77};
       int length = numbers.length;
    //    System.out.println("length of numbers array is "+length);

       // напечатать все элементы массива numbers  в цикле for
        for (int i = 0; i < numbers.length ;i++){
       //     System.out.println(numbers[i]);
        }


        //Создать массив из 10 элементов,  заполнить его элементами от 0 до 9 и вывести на печать
        // в цикле.
        int[] nums = new int[10];

        // присваиваем значения элементам массива
        for(int i = 0;i<nums.length;i++){
            nums[i] = i;
        }

        // выводим значения элементов на печать
        for(int i = 0;i<nums.length;i++) {

        //    System.out.println("nums["+i+"] ="+nums[i]);
        }

        nums[9] = 5555 ;

        for(int i = 0;i<nums.length;i++) {

        //    System.out.println("nums["+i+"] ="+nums[i]);
        }

      //  nums[11] = 34;

        // создадим массив строк
        String[] names = {"John","Jack","Mary","Bill","Ann"};

        for (int i = 0;i<names.length;i++){
       //     System.out.println(names[i]);
        }
      //  System.out.println("new Array with Kate");
        names[1]="Kate";

        for (int i = 0;i<names.length;i++){
      //      System.out.println(names[i]);
        }
     //   names[8]="Evgeny";

        // добавить элементы в массив можно ( больше длины маасива) можно путем создания нового массива
        // нужной длины и копированием в него старых элементов + добавить новые

        String[] newNames = new String[names.length + 2];

        // в цикле копируем значения из старого массива в новый
        for ( int i=0;i<names.length; i++){
            newNames[i] = names[i];
        }

        for (int i =0;i<newNames.length;i++){
     //       System.out.println(newNames[i]);
        }

      //  System.out.println("newNames length is "+newNames.length);
       // newNames
      //  newNames[5] = "Peter";
      //  newNames[6] = "Nick";

        newNames[newNames.length-2] = "Peter";
        newNames[newNames.length-1] = "Nick";

        for (int i =0;i<newNames.length;i++){
     //       System.out.println(newNames[i]);
        }

        // найти максимальный элемент массива
        int[] intNumbers = {7,2,67,3,0};

        // обьявляем переменную max,  в которую будем записывать макс.значение
        int max = intNumbers[0]; //7


        for ( int i = 1; i < intNumbers.length; i++){
            if (intNumbers[i]>max){ // проверяем будет ли значение текущего элемента больше чем max
                max = intNumbers[i];// и если да, то присваиваем это значение перменной max
            }
        }
        System.out.println("Max element is "+max);

        //найти мин. элемент массива
        int min = intNumbers[0];
        for(int i = 1; i<intNumbers.length;i++){
            if(intNumbers[i]<min){
                min = intNumbers[i];
            }
        }
        System.out.println("Min elt is "+min);







    }
}