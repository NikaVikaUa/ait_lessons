Задачи на урок:
Разбор ДЗ
Классы,обьекты
Конструкторы
Инкапсуляция, пакеты, модификаторы доступа
Геттеры и сеттеры
Объектно-ориентированное программирование
Классы и объекты

Java является объектно-ориентированным языком, поэтому такие понятия как "класс" и "объект" играют в нем ключевую роль. Любую программу на Java можно представить как набор взаимодействующих между собой объектов.

Шаблоном или описанием объекта является класс, а объект представляет экземпляр этого класса. Можно еще провести следующую аналогию. У нас у всех есть некоторое представление о человеке - наличие двух рук, двух ног, головы, туловища и т.д. Есть некоторый шаблон - этот шаблон можно назвать классом. Реально же существующий человек (фактически экземпляр данного класса) является объектом этого класса.

Класс определяется с помощью ключевого слова сlass.

Конструкторы
Кроме обычных методов классы могут определять специальные методы, которые называются конструкторами. Конструкторы вызываются при создании нового объекта данного класса. Конструкторы выполняют инициализацию объекта.

Если в классе не определено ни одного конструктора, то для этого класса автоматически создается конструктор без параметров.

Если конструктор не инициализирует значения переменных объекта, то они получают значения по умолчанию. Для переменных числовых типов это число 0, а для типа string и классов - это значение null (то есть фактически отсутствие значения).
Если необходимо, чтобы при создании объекта производилась какая-то логика, например, чтобы поля класса получали какие-то определенные значения, то можно определить в классе свои конструкторы.

Модификаторы доступа и инкапсуляция

Все члены класса в языке Java - поля и методы - имеют модификаторы доступа. В прошлых темах мы уже сталкивались с модификатором public. Модификаторы доступа позволяют задать допустимую область видимости для членов класса, то есть контекст, в котором можно употреблять данную переменную или метод.

В Java используются следующие модификаторы доступа:

public: публичный, общедоступный класс или член класса. Поля и методы, объявленные с модификатором public, видны другим классам из текущего пакета и из внешних пакетов.

private: закрытый класс или член класса, противоположность модификатору public. Закрытый класс или член класса доступен только из кода в том же классе.

protected: такой класс или член класса доступен из любого места в текущем классе или пакете или в производных классах, даже если они находятся в других пакетах

Модификатор по умолчанию. Отсутствие модификатора у поля или метода класса предполагает применение к нему модификатора по умолчанию. Такие поля или методы видны всем классам в текущем пакете.

Задача1
Создать класс Voter (Избиратель) , содержащий поля имя, адрес, возраст а также конструктор, геттеры и сеттеры. При создании должно быть учтено, что минимальный возраст в Германии для участия в выборах - 16 лет. Создать несколько обьектов класса и вывести их на печать

code/access_modifiers/src/Main.java
public class Main {


    //  Модификаторы доступа
    /*
    Существует 4 модификатора доступа :
    1. default  - по умолчанию, т.е. когда мы не указываем никакой модификатор.
    Область видимости переменной/метода в этом случае ограничивается пакетом, в котором
    находится класс, содержащий эту переменную/метод

    2. public - переменная/метод с таким модификатором видны везде

    3. private - переменная/метод с таким модификатором видны только в том классе, в котором
      они созданы

     4. protected
     */
}
code/constructors_in_java/src/Main.java
public class Main {
    public static void main(String[] args) {
        // создание обьекта через конструктор с 2 параметрами
        Person person1 = new Person("John",24); // присваиваем значения полей
                                                                    // обьекта через конструктор
                person1.name = "John";

        System.out.println("person1 name is "+person1.name);
        System.out.println("person1 age is "+person1.age);

        // создание обьекта через конструктор без аргументов
        Person person2 = new Person();
        person2.name = "Bill";
        person2.age = 45;

        //создание обьекта через конструктор с 3 параметрами
        Person person3 = new Person("Linda",30,"Street1");
        System.out.println(person3.name);
        System.out.println(person3.age);
        System.out.println(person3.address);

        person3.canEat();




    }
}
code/constructors_in_java/src/Person.java
public class Person {

 public String name;
  int age;

   String address;


    //  конструктор - это блок кода, который присваивает значения созданному обьекту.
    // конструктор напоминает метод в джаве, но это не метод и он ничего не возвращает.
    // Можно рассматривать конструктор как особый вид метода. Название конструктора совпадает с именем класса
    // и пишется с большой буквы

    //Виды конструкторов:
    /*
    - default  - пустой констуктор, который по умолчанию вставляется компилятором в случае отсутствия в классе в явном
          виде обьявленного конструктора

     - конструктор без аргументов, пример Person(){}

    */
    Person(){};

    /*

     - конструктор с параметрами
     */
    Person(String name, int age ){ // передаваемые в скобках параметры присваивают значения переменным
                                                // обьекта
        this.name = name; //
        this.age = age;

    }

    Person(String name, int age, String address ){ // передаваемые в скобках параметры присваивают значения переменным
        // обьекта
        this.name = name; //
        this.age = age;
        this.address = address;
    }


  //  String name;
    void canEat (){
        System.out.println(name + " can eat");
        String name = "Peter";
        System.out.println(name + " can eat");

    }

    void sayAge(){
        System.out.println("my age is "+age);
    }

    void saySmth(){
        String x = "Ok";  // переменная x  является локальной и видна только внутри метода, в котором она обьявлена
        System.out.println(x);
    }


    void saySmth1(){
        String x = "Yes";  // переменная x  является локальной и видна только внутри метода, в котором она обьявлена
        System.out.println(x);
    }

  //  Person(){}
}
code/getters_setters/src/Employee.java
public class Employee {

    private String name;

    private int age;

    private String address;

    private int salary;

    public Employee(String name, int age, String address, int salary) {
        this.name = name;
        this.age = age;
        this.salary = salary;
        this.address = address;
    }

    public String getName() { // геттер возвращает значение соответствующей переменной
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getAddress() {
        return address;
    }

    public int getSalary() {
        return salary;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        if (age > 17) { //  возраст будет заменен на новое значение только если он больше 17 лет
            this.age = age;
        } else {
            System.out.println("Employee's age cannot be less than 18 !");
        }
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public void setSalary(int salary) {
        if (salary < 0 || salary > 10000) {
            System.out.println("Salary is in the wrong range");
        } else {
            this.salary = salary;
        }
    }
}
code/getters_setters/src/Main.java
public class Main {
    public static void main(String[] args) {
        Employee employee = new Employee("John",47,"Street1",3000);
        System.out.println(" employee John:");
        System.out.println(employee.getName());
        System.out.println(employee.getAge());
        System.out.println(employee.getAddress());
        System.out.println(employee.getSalary());

     //   employee.salary = 10000000;
     //   employee.age = 1;
      //  employee.getName()="Ann";

        System.out.println(" employee John:");
        System.out.println(employee.getName());
        System.out.println(employee.getAge());
        System.out.println(employee.getAddress());
        System.out.println(employee.getSalary());

        employee.setAge(76);
        employee.setSalary(-1000);

        System.out.println(" employee John:");
        System.out.println(employee.getName());
        System.out.println(employee.getAge());
        System.out.println(employee.getAddress());
        System.out.println(employee.getSalary());

        employee.setAge(-2);
        employee.setSalary(1000000000);

        System.out.println(" employee John:");
        System.out.println(employee.getName());
        System.out.println(employee.getAge());
        System.out.println(employee.getAddress());
        System.out.println(employee.getSalary());




    }
}
code/homework19/src/Main.java
public class Main {
    public static void main(String[] args) {
        Student student1 = new Student();
        student1.name = "Bill";
        student1.age = 32;

        Student student2 = new Student();
        student2.name = "Ann";
        student2.age = 18;

        System.out.println("Student's 1 name and age are: "+ student1.name +" "+student1.age);
        System.out.println("Student's 2 name and age are: "+ student2.name +" "+student2.age);
    }
}
code/homework19/src/Student.java
/*
Задача 1
Создать класс Student c полями (переменными) имя и возраст.
Создать несколько обьектов этого класса. Вывести их на печать
 */
public class Student {

    //
    Student(){

    }


    String name;
    int age;
}
code/our_packages/src/Calculator.java
public class Calculator {
    public int add (int a, int b){
        return a+b;
    }
}
code/our_packages/src/Main.java
public class Main {

    public static void main(String[] args) {
      //  Calculator
      //  System.out.println(cal.add(1,2));
    }
}