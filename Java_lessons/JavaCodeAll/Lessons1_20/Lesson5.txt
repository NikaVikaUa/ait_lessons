Задачи на урок:

Разбор домашнего задания
Тип данных char
Методы в Java
Символы в памяти компьютера

Любой набор данных в оперативной памяти компьютера должен храниться в виде двоичного числа. Это относится и к строкам, которые состоят из символов (буквы, знаки препинания и т.д.). Когда символ сохраняется в памяти, он сначала преобразуется в цифровой код. И затем этот цифровой код сохраняется в памяти как двоичное число.

За прошедшие годы для представления символов в памяти компьютера были разработаны различные схемы кодирования. Исторически самой важной из этих схем кодирования является схема кодирования ASCII (American Standard Code for Information Interchange – американский стандартный код обмена информацией).

Таблица символов ASCII

ASCII представляет собой набор из 128 цифровых кодов, которые обозначают английские буквы, различные знаки препинания и другие символы. Например, код ASCII для прописной английской буквы «А» (латинской) равняется 65. Когда на компьютерной клавиатуре вы набираете букву «А» в верхнем регистре, в памяти сохраняется число 65 (как двоичное число, разумеется).

Код ASCII для английской «В» в верхнем регистре равняется 66, для «С» в верхнем регистре – 67 и т. д. На один символ в ASCII отводится ровно 7 бит.

Набор символов ASCII был разработан в начале 1960-х годов и в конечном счете принят почти всеми производителями компьютеров. Однако схема кодирования ASCII имеет ограничения, потому что она определяет коды только для 128 символов. Для того чтобы это исправить, в начале 1990-х годов был разработан набор символов Юникода (Unicode). Это широкая схема кодирования, совместимая с ASCII, которая может также представлять символы многих языков мира. Сегодня Юникод быстро становится стандартным набором символов, используемым в компьютерной индустрии.

Таблица символов Unicode

Таблица символов Юникод представляет собой набор цифровых символов, которые включают в себя знаки почти всех письменных языков мира. Стандарт предложен в 1991 году некоммерческой организацией «Консорциум Юникода». Применение этого стандарта позволяет закодировать очень большое число символов из разных систем письменности: в документах, закодированных по стандарту Юникод, могут соседствовать китайские иероглифы, математические символы, буквы греческого алфавита, латиницы и кириллицы, символы музыкальной нотной нотации.

Стандарт состоит из двух основных частей: универсального набора символов и семейства кодировок (Unicode transformation format, UTF). Универсальный набор символов перечисляет допустимые по стандарту Юникод символы и присваивает каждому символу код в виде неотрицательного целого числа. Семейство кодировок определяет способы преобразования кодов символов для хранения на компьютере и передачи.

В Юникод все время добавляются новые символы, а сам размер этой таблицы не ограничен и будет только расти, поэтому сейчас при хранении в памяти одного юникод-символа может потребоваться от 1 до 8 байт. Отсутствие ограничений привело к тому, что стали появляться символы на все случаи жизни.

Примечание 1. Официальный сайт таблицы символов Unicode: https://home.unicode.org

Примечание 2. Юникод — это не кодировка. Это именно таблица символов. То, как символы с соответствующими кодами будут храниться в памяти компьютера, зависит от конкретной кодировки, базирующейся на Юникоде, например UTF-8. Про отличие таблицы символов Unicode от кодировки UTF-8 можно почитать тут: https://developer.roman.grinyov.name/blog/104

Примечание 3. Первые 128 кодов таблицы символов Unicode совпадают с ASCII.

Методы

Если переменные и константы хранят некоторые значения, то методы содержат набор операторов, которые выполняют определенные действия.

Общее определение методов выглядит следующим образом:

[модификаторы] тип_возвращаемого_значения название_метода ([параметры]){

// тело метода

}

Модификаторы и параметры необязательны.

По умолчанию главный класс любой программы на Java содержит метод main, который служит точкой входа в программу:

public static void main(String[] args) {

System.out.println("Hello world!");

}

Ключевые слова public и static являются модификаторами. Далее идет тип возвращаемого значения. Ключевое слово void указывает на то, что метод ничего не возвращает.

Затем идут название метода - main и в скобках параметры метода - String[] args. И в фигурные скобки заключено тело метода - все действия, которые он выполняет.

Вызов метода осуществляется в форме:

имя_метода(аргументы);

После имени метода указываются скобки, в которых перечисляются аргументы - значения для параметров метода.

Одно из важных преимуществ методов заключается в том, что мы можем вынести некоторые общие действия в отдельный метод и затем вызывать многократно их в различных местах программы.

Также следует отметить, что чтобы вызвать в методе main другие методы, которые определены в одном классе с методом main, они должны иметь модификатор static.

Задача 1
Написать метод, считающий площадь круга и возвращающий это значение в основную программу. Формула для расчета площади area = pi* radius * radius
Значение радиуса должно передаваться как аргумент метода.
Затем, в методе main вывести полученное значение на экран

Задача 2
Написать метод, конвертирующий температуру из градусов Фаренгейта в градусы Цельсия по формуле С = 5*(F-32)/9. Значение градусов Фаренгейта должно передаваться как аргумент метода.
Метод должен возвращать полученное значение в основную программу.
Затем, в методе main вывести полученное значение на экран.

code/homework/src/Main.java
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        System.out.println("Enter the first name :");
        String name = scanner.nextLine();

        System.out.println("Enter the second name");
        String secondName = scanner.nextLine();

        System.out.println("Enter age");
        int age = scanner.nextInt();

        System.out.println("Hello "+name+" "+secondName+" !"+" Your age is "+age);


    }
}
code/methods/src/Main.java
public class Main {
    public static void main(String[] args) {

        hello("Hello Java ",17);
        System.out.println(hello("Hello Java ",17)+" !!!");
       int result = sum(3,4);
        hello("Hello World ",1);
        hello("Hello ",2023);
        int result1 = sum(1,10);

        System.out.println(result + result1);



        // Методы
    }

    // пишем метод hello()
   public static String  hello(String str, int num){
       // System.out.println(str + num);
       String res = str +" "+num;
       return res;
    }

   static int sum(int a, int b){
       // System.out.println(a+b);
       int sumInt = a+b;
       return sumInt;
    }

    static void foo(){
        System.out.println("Hello");
        return;
    }

}
code/our_chars/src/Main.java
public class Main {
    //Chars
    // системы кодировки
    // ASCII - система кодирования, созданная в 1963 г
    /*
    В Джава  для хранения символа используется 2 бита или 16 байт памяти
    и таким образом можно закодировать символы в диапазоне от 0 до 65535

        */
    public static void main(String[] args) {


        char x;
        x = 'r';
      //  System.out.println("This is char: "+ x);
      //  System.out.println("This is char:"+ 'x');
        char ch ='X';
        System.out.println("This is char: "+ ch);
        ch++;
        System.out.println("This is now char "+ch);
        ch = 90;
        System.out.println("This is now char "+ch);

        char unicode ='\u00A7';
        System.out.println(unicode);

        char quote = '\'';
        System.out.println(quote);

        String str = "\"";
        char slash = '\\';
        char newLine = '\n';

        System.out.print("Hello\nWorld\n");
        System.out.print("Again");

        char cha = 'a';
        int a = 100;
        long l = 12L;
        int big = 123_450_670;





    }
}